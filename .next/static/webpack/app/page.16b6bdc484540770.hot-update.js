"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/csv-export.ts":
/*!*******************************!*\
  !*** ./src/lib/csv-export.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToCSV: () => (/* binding */ convertToCSV),\n/* harmony export */   downloadCSV: () => (/* binding */ downloadCSV),\n/* harmony export */   extractDayHours: () => (/* binding */ extractDayHours),\n/* harmony export */   formatHours: () => (/* binding */ formatHours)\n/* harmony export */ });\n// Función para extraer horarios de un día específico del objeto opening_hours\nfunction extractDayHours(openingHours, dayName) {\n    if (!openingHours || typeof openingHours !== 'object') return '';\n    // Buscar el día exacto o variaciones comunes\n    const dayVariations = {\n        'Monday': [\n            'Monday',\n            'monday',\n            'Mon',\n            'mon'\n        ],\n        'Tuesday': [\n            'Tuesday',\n            'tuesday',\n            'Tue',\n            'tue'\n        ],\n        'Wednesday': [\n            'Wednesday',\n            'wednesday',\n            'Wed',\n            'wed'\n        ],\n        'Thursday': [\n            'Thursday',\n            'thursday',\n            'Thu',\n            'thu'\n        ],\n        'Friday': [\n            'Friday',\n            'friday',\n            'Fri',\n            'fri'\n        ],\n        'Saturday': [\n            'Saturday',\n            'saturday',\n            'Sat',\n            'sat'\n        ],\n        'Sunday': [\n            'Sunday',\n            'sunday',\n            'Sun',\n            'sun'\n        ]\n    };\n    const variations = dayVariations[dayName] || [\n        dayName\n    ];\n    for (const variation of variations){\n        if (openingHours[variation]) {\n            return openingHours[variation];\n        }\n    }\n    return '';\n}\n// Función para formatear horarios en formato HH:MM - HH:MM\nfunction formatHours(hours) {\n    if (!hours) return '';\n    // Si ya está en el formato correcto, devolverlo\n    if (hours.match(/^\\d{2}:\\d{2}\\s*[-–]\\s*\\d{2}:\\d{2}$/)) {\n        return hours;\n    }\n    // Si contiene múltiples rangos (ej: \"09:00-12:00,14:00-18:00\")\n    if (hours.includes(',')) {\n        return hours.split(',').map((range)=>range.trim()).map((range)=>{\n            if (range.includes('-') || range.includes('–')) {\n                const separator = range.includes('–') ? '–' : '-';\n                const [start, end] = range.split(separator).map((t)=>t.trim());\n                return \"\".concat(formatTime(start), \" - \").concat(formatTime(end));\n            }\n            return range;\n        }).join(' & ');\n    }\n    // Si contiene un solo rango\n    if (hours.includes('-') || hours.includes('–')) {\n        const separator = hours.includes('–') ? '–' : '-';\n        const [start, end] = hours.split(separator).map((t)=>t.trim());\n        return \"\".concat(formatTime(start), \" - \").concat(formatTime(end));\n    }\n    // Si es texto descriptivo (ej: \"Closed\", \"Open 24 hours\")\n    return hours;\n}\n// Función auxiliar para formatear tiempo individual\nfunction formatTime(time) {\n    if (!time) return '';\n    // Si ya está en formato HH:MM, devolverlo\n    if (time.match(/^\\d{2}:\\d{2}$/)) {\n        return time;\n    }\n    // Si está en formato H:MM, agregar cero inicial\n    if (time.match(/^\\d:\\d{2}$/)) {\n        return \"0\".concat(time);\n    }\n    // Intentar convertir formatos de 12 horas a 24 horas\n    if (time.toLowerCase().includes('am') || time.toLowerCase().includes('pm')) {\n        try {\n            const [timePart, period] = time.toLowerCase().split(/\\s*(am|pm)/);\n            const [hours, minutes] = timePart.split(':').map((n)=>parseInt(n));\n            let hour24 = hours;\n            if (period === 'pm' && hours !== 12) {\n                hour24 += 12;\n            } else if (period === 'am' && hours === 12) {\n                hour24 = 0;\n            }\n            return \"\".concat(hour24.toString().padStart(2, '0'), \":\").concat(minutes.toString().padStart(2, '0'));\n        } catch (e) {\n            return time;\n        }\n    }\n    return time;\n}\n// Función para convertir resultados a CSV\nfunction convertToCSV(results) {\n    console.log('🔍 Converting to CSV, results count:', results.length);\n    console.log('📊 Sample result:', results[0]);\n    if (results.length === 0) {\n        console.warn('⚠️ No results to convert to CSV');\n        return '';\n    }\n    // CSV Headers - Updated for new backend structure\n    const headers = [\n        'Input Business Name',\n        'Input Address',\n        'Input City',\n        'Input Postal Code',\n        'Scraped Business Name',\n        'Scraped Address',\n        'Status',\n        'Phone',\n        'Facebook',\n        'Instagram',\n        'Twitter',\n        'LinkedIn',\n        'YouTube',\n        'Monday Hours',\n        'Tuesday Hours',\n        'Wednesday Hours',\n        'Thursday Hours',\n        'Friday Hours',\n        'Saturday Hours',\n        'Sunday Hours',\n        'Job ID',\n        'Processing Time (ms)',\n        'Processed At'\n    ] // Convert data - Using new backend structure\n    ;\n    const csvRows = [\n        headers.join(','),\n        ...results.map((result)=>{\n            var _result_scrapedData, _result_scrapedData1, _result_scrapedData2, _result_scrapedData3, _result_scrapedData_socialMedia, _result_scrapedData4, _result_scrapedData_socialMedia1, _result_scrapedData5, _result_scrapedData_socialMedia2, _result_scrapedData6, _result_scrapedData_socialMedia3, _result_scrapedData7, _result_scrapedData_socialMedia4, _result_scrapedData8, _result_scrapedData9, _result_scrapedData10, _result_scrapedData11, _result_scrapedData12, _result_scrapedData13, _result_scrapedData14, _result_scrapedData15, _result_processingTime;\n            return [\n                // INPUT DATA (Original CSV data)\n                escapeCSV(result.originalData.name || ''),\n                escapeCSV(result.originalData.address || ''),\n                escapeCSV(result.originalData.city || ''),\n                escapeCSV(result.originalData.postal_code || ''),\n                // SCRAPED DATA (Real data from Google Maps)\n                escapeCSV(((_result_scrapedData = result.scrapedData) === null || _result_scrapedData === void 0 ? void 0 : _result_scrapedData.fullName) || ''),\n                escapeCSV(((_result_scrapedData1 = result.scrapedData) === null || _result_scrapedData1 === void 0 ? void 0 : _result_scrapedData1.fullAddress) || ''),\n                ((_result_scrapedData2 = result.scrapedData) === null || _result_scrapedData2 === void 0 ? void 0 : _result_scrapedData2.status) || 'unknown',\n                escapeCSV(((_result_scrapedData3 = result.scrapedData) === null || _result_scrapedData3 === void 0 ? void 0 : _result_scrapedData3.phone) || ''),\n                // SOCIAL MEDIA (From Google Maps)\n                escapeCSV(((_result_scrapedData4 = result.scrapedData) === null || _result_scrapedData4 === void 0 ? void 0 : (_result_scrapedData_socialMedia = _result_scrapedData4.socialMedia) === null || _result_scrapedData_socialMedia === void 0 ? void 0 : _result_scrapedData_socialMedia.facebook) || ''),\n                escapeCSV(((_result_scrapedData5 = result.scrapedData) === null || _result_scrapedData5 === void 0 ? void 0 : (_result_scrapedData_socialMedia1 = _result_scrapedData5.socialMedia) === null || _result_scrapedData_socialMedia1 === void 0 ? void 0 : _result_scrapedData_socialMedia1.instagram) || ''),\n                escapeCSV(((_result_scrapedData6 = result.scrapedData) === null || _result_scrapedData6 === void 0 ? void 0 : (_result_scrapedData_socialMedia2 = _result_scrapedData6.socialMedia) === null || _result_scrapedData_socialMedia2 === void 0 ? void 0 : _result_scrapedData_socialMedia2.twitter) || ''),\n                escapeCSV(((_result_scrapedData7 = result.scrapedData) === null || _result_scrapedData7 === void 0 ? void 0 : (_result_scrapedData_socialMedia3 = _result_scrapedData7.socialMedia) === null || _result_scrapedData_socialMedia3 === void 0 ? void 0 : _result_scrapedData_socialMedia3.linkedin) || ''),\n                escapeCSV(((_result_scrapedData8 = result.scrapedData) === null || _result_scrapedData8 === void 0 ? void 0 : (_result_scrapedData_socialMedia4 = _result_scrapedData8.socialMedia) === null || _result_scrapedData_socialMedia4 === void 0 ? void 0 : _result_scrapedData_socialMedia4.youtube) || ''),\n                // OPERATING HOURS (From Google Maps)\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData9 = result.scrapedData) === null || _result_scrapedData9 === void 0 ? void 0 : _result_scrapedData9.openingHours, 'Monday'))),\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData10 = result.scrapedData) === null || _result_scrapedData10 === void 0 ? void 0 : _result_scrapedData10.openingHours, 'Tuesday'))),\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData11 = result.scrapedData) === null || _result_scrapedData11 === void 0 ? void 0 : _result_scrapedData11.openingHours, 'Wednesday'))),\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData12 = result.scrapedData) === null || _result_scrapedData12 === void 0 ? void 0 : _result_scrapedData12.openingHours, 'Thursday'))),\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData13 = result.scrapedData) === null || _result_scrapedData13 === void 0 ? void 0 : _result_scrapedData13.openingHours, 'Friday'))),\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData14 = result.scrapedData) === null || _result_scrapedData14 === void 0 ? void 0 : _result_scrapedData14.openingHours, 'Saturday'))),\n                escapeCSV(formatHours(extractDayHours((_result_scrapedData15 = result.scrapedData) === null || _result_scrapedData15 === void 0 ? void 0 : _result_scrapedData15.openingHours, 'Sunday'))),\n                // PROCESSING INFO\n                escapeCSV(result.jobId || ''),\n                ((_result_processingTime = result.processingTime) === null || _result_processingTime === void 0 ? void 0 : _result_processingTime.toString()) || '',\n                escapeCSV(result.processedAt || '') // Processed At\n            ].join(',');\n        })\n    ];\n    return csvRows.join('\\n');\n}\n// Función para escapar valores CSV (manejar comas, comillas, etc.)\nfunction escapeCSV(value) {\n    if (!value) return '';\n    // Si contiene comas, comillas o saltos de línea, envolver en comillas\n    if (value.includes(',') || value.includes('\"') || value.includes('\\n') || value.includes('\\r')) {\n        // Escapar comillas duplicándolas\n        const escaped = value.replace(/\"/g, '\"\"');\n        return '\"'.concat(escaped, '\"');\n    }\n    return value;\n}\n// Función para descargar CSV\nfunction downloadCSV(results, filename) {\n    if (!filename) {\n        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\n        filename = \"scraping-results-\".concat(timestamp, \".csv\");\n    }\n    const csvContent = convertToCSV(results);\n    if (!csvContent) {\n        console.error('No data to export');\n        return;\n    }\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', filename);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url) // Limpiar memoria\n        ;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/csv-export.ts\n"));

/***/ })

});