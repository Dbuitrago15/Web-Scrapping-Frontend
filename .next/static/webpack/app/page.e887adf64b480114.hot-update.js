"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/use-translation.ts":
/*!**************************************!*\
  !*** ./src/hooks/use-translation.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTranslation: () => (/* binding */ useTranslation)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_language_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/contexts/language-context */ \"(app-pages-browser)/./src/contexts/language-context.tsx\");\n/* __next_internal_client_entry_do_not_use__ useTranslation auto */ \n\nconst translations = {\n    en: {\n        title: 'Web Scraping Tool',\n        subtitle: 'Upload your CSV file and get enhanced business data',\n        'error.upload': 'Failed to upload file. Please check the file and try again.',\n        'error.processing': 'An error occurred while processing your file.',\n        start_scraping: 'Start Scraping',\n        search_placeholder: 'Search for businesses...',\n        location_placeholder: 'Enter location',\n        city_label: 'City',\n        results_found: 'results found',\n        no_results: 'No results found',\n        error_loading: 'Error loading results',\n        loading: 'Loading...',\n        stop_scraping: 'Stop Scraping',\n        progress: 'Progress',\n        name: 'Name',\n        rating: 'Rating',\n        rating_count: 'Reviews',\n        phone: 'Phone',\n        address: 'Address',\n        website: 'Website',\n        price_range: 'Price Range',\n        category: 'Category',\n        monday_hours: 'Monday',\n        tuesday_hours: 'Tuesday',\n        wednesday_hours: 'Wednesday',\n        thursday_hours: 'Thursday',\n        friday_hours: 'Friday',\n        saturday_hours: 'Saturday',\n        sunday_hours: 'Sunday',\n        view_details: 'View Details',\n        completion_time: 'Completion Time',\n        results_statistics: 'Results Statistics',\n        success_rate: 'Success Rate',\n        processing_errors: 'Processing Errors',\n        data_quality: 'Data Quality',\n        performance_metrics: 'Performance Metrics',\n        completion_details: 'Completion Details',\n        successful_results: 'Successful',\n        failed_results: 'Failed',\n        google_errors: 'Google Errors',\n        network_errors: 'Network Errors',\n        parsing_errors: 'Parsing Errors',\n        timeout_errors: 'Timeout Errors',\n        avg_processing_time: 'Avg Processing Time',\n        total_processing_time: 'Total Processing Time',\n        complete_profiles: 'Complete Profiles',\n        partial_profiles: 'Partial Profiles',\n        missing_data: 'Missing Data',\n        invalid_format: 'Invalid Format',\n        results_breakdown: 'Results Breakdown',\n        error_breakdown: 'Error Breakdown',\n        language_selector: 'Language',\n        backend_services_status: 'Backend Services Status',\n        up: 'Up',\n        down: 'Down',\n        start_backend: 'Start backend',\n        api_running_redis_worker_unknown: 'API is running but Redis/Worker status unknown.',\n        check_docker_compose: 'Check',\n        processing_complete: 'Processing Complete!',\n        successfully_processed: 'Successfully processed',\n        businesses_with: 'businesses with',\n        success_rate_with_details: 'success rate',\n        successful: 'successful',\n        failed: 'failed',\n        view_detailed_results: 'View Detailed Results',\n        'upload.title': 'Upload CSV File',\n        'upload.description': 'Select a CSV file containing business information to process and enhance.',\n        'upload.selectFile': 'Select CSV File',\n        'upload.button': 'Process File',\n        'upload.uploading': 'Uploading file...',\n        download_csv: 'Download CSV',\n        export_results: 'Export Results',\n        'results.title': 'Results',\n        'table.entries': 'entries',\n        'table.search': 'Search...',\n        'table.noResults': 'No results found.',\n        'table.rowsPerPage': 'Rows per page',\n        'table.page': 'Page',\n        'table.of': 'of',\n        'table.showing': 'Showing',\n        'processing.status': 'Processing Status',\n        'processing.progress': 'Processing {completed} of {total}...',\n        'processing.button': 'Processing...',\n        'error.title': 'Error',\n        'error.retry': 'Retry',\n        'table.input_name': 'Input Name',\n        'table.found_name': 'Found Name',\n        'table.input_address': 'Input Address',\n        'table.found_phone': 'Found Phone',\n        'table.found_website': 'Found Website',\n        'table.found_on_maps': 'Found on Google Maps',\n        'table.input_data': 'Input',\n        'table.normalized': 'Normalized'\n    },\n    fr: {\n        title: 'Outil de Web Scraping',\n        subtitle: 'Téléchargez votre fichier CSV et obtenez des données d\\'entreprise améliorées',\n        'error.upload': 'Échec du téléchargement du fichier. Veuillez vérifier le fichier et réessayer.',\n        'error.processing': 'Une erreur s\\'est produite lors du traitement de votre fichier.',\n        start_scraping: 'Démarrer le Scraping',\n        search_placeholder: 'Rechercher des entreprises...',\n        location_placeholder: 'Entrer l\\'emplacement',\n        city_label: 'Ville',\n        results_found: 'résultats trouvés',\n        no_results: 'Aucun résultat trouvé',\n        error_loading: 'Erreur lors du chargement des résultats',\n        loading: 'Chargement...',\n        stop_scraping: 'Arrêter le Scraping',\n        progress: 'Progrès',\n        name: 'Nom',\n        rating: 'Note',\n        rating_count: 'Avis',\n        phone: 'Téléphone',\n        address: 'Adresse',\n        website: 'Site Web',\n        price_range: 'Gamme de Prix',\n        category: 'Catégorie',\n        monday_hours: 'Lundi',\n        tuesday_hours: 'Mardi',\n        wednesday_hours: 'Mercredi',\n        thursday_hours: 'Jeudi',\n        friday_hours: 'Vendredi',\n        saturday_hours: 'Samedi',\n        sunday_hours: 'Dimanche',\n        view_details: 'Voir les Détails',\n        completion_time: 'Temps d\\'Achèvement',\n        results_statistics: 'Statistiques des Résultats',\n        success_rate: 'Taux de Réussite',\n        processing_errors: 'Erreurs de Traitement',\n        data_quality: 'Qualité des Données',\n        performance_metrics: 'Métriques de Performance',\n        completion_details: 'Détails d\\'Achèvement',\n        successful_results: 'Réussis',\n        failed_results: 'Échoués',\n        google_errors: 'Erreurs Google',\n        network_errors: 'Erreurs Réseau',\n        parsing_errors: 'Erreurs d\\'Analyse',\n        timeout_errors: 'Erreurs de Délai',\n        avg_processing_time: 'Temps de Traitement Moyen',\n        total_processing_time: 'Temps de Traitement Total',\n        complete_profiles: 'Profils Complets',\n        partial_profiles: 'Profils Partiels',\n        missing_data: 'Données Manquantes',\n        invalid_format: 'Format Invalide',\n        results_breakdown: 'Répartition des Résultats',\n        error_breakdown: 'Répartition des Erreurs',\n        language_selector: 'Langue',\n        backend_services_status: 'État des Services Backend',\n        up: 'En marche',\n        down: 'Arrêté',\n        start_backend: 'Démarrer le backend',\n        api_running_redis_worker_unknown: 'L\\'API fonctionne mais l\\'état Redis/Worker est inconnu.',\n        check_docker_compose: 'Vérifier',\n        processing_complete: 'Traitement Terminé!',\n        successfully_processed: 'Traité avec succès',\n        businesses_with: 'entreprises avec',\n        success_rate_with_details: 'taux de réussite',\n        successful: 'réussi',\n        failed: 'échoué',\n        view_detailed_results: 'Voir les Résultats Détaillés',\n        'upload.title': 'Télécharger un Fichier CSV',\n        'upload.description': 'Sélectionnez un fichier CSV contenant des informations d\\'entreprise à traiter et améliorer.',\n        'upload.selectFile': 'Sélectionner un Fichier CSV',\n        'upload.button': 'Traiter le Fichier',\n        'upload.uploading': 'Téléchargement du fichier...',\n        download_csv: 'Télécharger CSV',\n        export_results: 'Exporter les Résultats',\n        'results.title': 'Résultats',\n        'table.entries': 'entrées',\n        'table.search': 'Rechercher...',\n        'table.noResults': 'Aucun résultat trouvé.',\n        'table.rowsPerPage': 'Lignes par page',\n        'table.page': 'Page',\n        'table.of': 'de',\n        'table.showing': 'Affichage',\n        'processing.status': 'Statut du traitement',\n        'processing.progress': 'Traitement de {completed} sur {total}...',\n        'processing.button': 'Traitement...',\n        'error.title': 'Erreur',\n        'error.retry': 'Réessayer',\n        'table.input_name': 'Nom de saisie',\n        'table.found_name': 'Nom trouvé',\n        'table.input_address': 'Adresse de saisie',\n        'table.found_phone': 'Téléphone trouvé',\n        'table.found_website': 'Site Web trouvé',\n        'table.found_on_maps': 'Trouvé sur Google Maps',\n        'table.input_data': 'Saisie',\n        'table.normalized': 'Normalisé'\n    },\n    de: {\n        title: 'Web Scraping Tool',\n        subtitle: 'Laden Sie Ihre CSV-Datei hoch und erhalten Sie erweiterte Unternehmensdaten',\n        'error.upload': 'Fehler beim Hochladen der Datei. Bitte überprüfen Sie die Datei und versuchen Sie es erneut.',\n        'error.processing': 'Bei der Verarbeitung Ihrer Datei ist ein Fehler aufgetreten.',\n        start_scraping: 'Scraping Starten',\n        search_placeholder: 'Nach Unternehmen suchen...',\n        location_placeholder: 'Standort eingeben',\n        city_label: 'Stadt',\n        results_found: 'Ergebnisse gefunden',\n        no_results: 'Keine Ergebnisse gefunden',\n        error_loading: 'Fehler beim Laden der Ergebnisse',\n        loading: 'Laden...',\n        stop_scraping: 'Scraping Stoppen',\n        progress: 'Fortschritt',\n        name: 'Name',\n        rating: 'Bewertung',\n        rating_count: 'Bewertungen',\n        phone: 'Telefon',\n        address: 'Adresse',\n        website: 'Website',\n        price_range: 'Preisbereich',\n        category: 'Kategorie',\n        monday_hours: 'Montag',\n        tuesday_hours: 'Dienstag',\n        wednesday_hours: 'Mittwoch',\n        thursday_hours: 'Donnerstag',\n        friday_hours: 'Freitag',\n        saturday_hours: 'Samstag',\n        sunday_hours: 'Sonntag',\n        view_details: 'Details Anzeigen',\n        completion_time: 'Abschlusszeit',\n        results_statistics: 'Ergebnisstatistiken',\n        success_rate: 'Erfolgsrate',\n        processing_errors: 'Verarbeitungsfehler',\n        data_quality: 'Datenqualität',\n        performance_metrics: 'Leistungsmetriken',\n        completion_details: 'Abschlussdetails',\n        successful_results: 'Erfolgreich',\n        failed_results: 'Fehlgeschlagen',\n        google_errors: 'Google-Fehler',\n        network_errors: 'Netzwerkfehler',\n        parsing_errors: 'Parsing-Fehler',\n        timeout_errors: 'Timeout-Fehler',\n        avg_processing_time: 'Durchschnittliche Verarbeitungszeit',\n        total_processing_time: 'Gesamte Verarbeitungszeit',\n        complete_profiles: 'Vollständige Profile',\n        partial_profiles: 'Teilweise Profile',\n        missing_data: 'Fehlende Daten',\n        invalid_format: 'Ungültiges Format',\n        results_breakdown: 'Ergebnisaufschlüsselung',\n        error_breakdown: 'Fehleraufschlüsselung',\n        language_selector: 'Sprache',\n        backend_services_status: 'Backend-Dienste Status',\n        up: 'Aktiv',\n        down: 'Inaktiv',\n        start_backend: 'Backend starten',\n        api_running_redis_worker_unknown: 'API läuft, aber Redis/Worker-Status unbekannt.',\n        check_docker_compose: 'Überprüfen',\n        processing_complete: 'Verarbeitung Abgeschlossen!',\n        successfully_processed: 'Erfolgreich verarbeitet',\n        businesses_with: 'Unternehmen mit',\n        success_rate_with_details: 'Erfolgsrate',\n        successful: 'erfolgreich',\n        failed: 'fehlgeschlagen',\n        view_detailed_results: 'Detaillierte Ergebnisse Anzeigen',\n        'upload.title': 'CSV-Datei Hochladen',\n        'upload.description': 'Wählen Sie eine CSV-Datei mit Unternehmensinformationen zum Verarbeiten und Verbessern aus.',\n        'upload.selectFile': 'CSV-Datei Auswählen',\n        'upload.button': 'Datei Verarbeiten',\n        'upload.uploading': 'Datei wird hochgeladen...',\n        download_csv: 'CSV Herunterladen',\n        export_results: 'Ergebnisse Exportieren',\n        'results.title': 'Ergebnisse',\n        'table.entries': 'Einträge',\n        'table.search': 'Suchen...',\n        'table.noResults': 'Keine Ergebnisse gefunden.',\n        'table.rowsPerPage': 'Zeilen pro Seite',\n        'table.page': 'Seite',\n        'table.of': 'von',\n        'table.showing': 'Anzeigen',\n        'processing.status': 'Verarbeitungsstatus',\n        'processing.progress': 'Verarbeitung von {completed} von {total}...',\n        'processing.button': 'Verarbeitung...',\n        'error.title': 'Fehler',\n        'error.retry': 'Wiederholen',\n        'table.input_name': 'Eingabename',\n        'table.found_name': 'Gefundener Name',\n        'table.input_address': 'Eingabeadresse',\n        'table.found_phone': 'Gefundenes Telefon',\n        'table.found_website': 'Gefundene Website',\n        'table.found_on_maps': 'Auf Google Maps gefunden',\n        'table.input_data': 'Eingabe',\n        'table.normalized': 'Normalisiert'\n    },\n    it: {\n        title: 'Strumento di Web Scraping',\n        subtitle: 'Carica il tuo file CSV e ottieni dati aziendali migliorati',\n        'error.upload': 'Caricamento del file non riuscito. Controlla il file e riprova.',\n        'error.processing': 'Si è verificato un errore durante l\\'elaborazione del file.',\n        start_scraping: 'Inizia Scraping',\n        search_placeholder: 'Cerca aziende...',\n        location_placeholder: 'Inserisci posizione',\n        city_label: 'Città',\n        results_found: 'risultati trovati',\n        no_results: 'Nessun risultato trovato',\n        error_loading: 'Errore nel caricamento dei risultati',\n        loading: 'Caricamento...',\n        stop_scraping: 'Ferma Scraping',\n        progress: 'Progresso',\n        name: 'Nome',\n        rating: 'Valutazione',\n        rating_count: 'Recensioni',\n        phone: 'Telefono',\n        address: 'Indirizzo',\n        website: 'Sito Web',\n        price_range: 'Fascia di Prezzo',\n        category: 'Categoria',\n        monday_hours: 'Lunedì',\n        tuesday_hours: 'Martedì',\n        wednesday_hours: 'Mercoledì',\n        thursday_hours: 'Giovedì',\n        friday_hours: 'Venerdì',\n        saturday_hours: 'Sabato',\n        sunday_hours: 'Domenica',\n        view_details: 'Visualizza Dettagli',\n        completion_time: 'Tempo di Completamento',\n        results_statistics: 'Statistiche Risultati',\n        success_rate: 'Tasso di Successo',\n        processing_errors: 'Errori di Elaborazione',\n        data_quality: 'Qualità dei Dati',\n        performance_metrics: 'Metriche di Performance',\n        completion_details: 'Dettagli di Completamento',\n        successful_results: 'Riusciti',\n        failed_results: 'Falliti',\n        google_errors: 'Errori Google',\n        network_errors: 'Errori di Rete',\n        parsing_errors: 'Errori di Parsing',\n        timeout_errors: 'Errori di Timeout',\n        avg_processing_time: 'Tempo di Elaborazione Medio',\n        total_processing_time: 'Tempo di Elaborazione Totale',\n        complete_profiles: 'Profili Completi',\n        partial_profiles: 'Profili Parziali',\n        missing_data: 'Dati Mancanti',\n        invalid_format: 'Formato Non Valido',\n        results_breakdown: 'Suddivisione Risultati',\n        error_breakdown: 'Suddivisione Errori',\n        language_selector: 'Lingua',\n        backend_services_status: 'Stato Servizi Backend',\n        up: 'Attivo',\n        down: 'Inattivo',\n        start_backend: 'Avvia backend',\n        api_running_redis_worker_unknown: 'API è in esecuzione ma stato Redis/Worker sconosciuto.',\n        check_docker_compose: 'Controlla',\n        processing_complete: 'Elaborazione Completata!',\n        successfully_processed: 'Elaborato con successo',\n        businesses_with: 'aziende con',\n        success_rate_with_details: 'tasso di successo',\n        successful: 'riuscito',\n        failed: 'fallito',\n        view_detailed_results: 'Visualizza Risultati Dettagliati',\n        'upload.title': 'Carica File CSV',\n        'upload.description': 'Seleziona un file CSV contenente informazioni aziendali da elaborare e migliorare.',\n        'upload.selectFile': 'Seleziona File CSV',\n        'upload.button': 'Elabora File',\n        'upload.uploading': 'Caricamento file...',\n        download_csv: 'Scarica CSV',\n        export_results: 'Esporta Risultati',\n        'results.title': 'Risultati',\n        'table.entries': 'voci',\n        'table.search': 'Cerca...',\n        'table.noResults': 'Nessun risultato trovato.',\n        'table.rowsPerPage': 'Righe per pagina',\n        'table.page': 'Pagina',\n        'table.of': 'di',\n        'table.showing': 'Mostrando',\n        'processing.status': 'Stato del processo',\n        'processing.progress': 'Elaborazione di {completed} su {total}...',\n        'processing.button': 'Elaborazione...',\n        'error.title': 'Errore',\n        'error.retry': 'Riprova',\n        'table.input_name': 'Nome di input',\n        'table.found_name': 'Nome trovato',\n        'table.input_address': 'Indirizzo di input',\n        'table.found_phone': 'Telefono trovato',\n        'table.found_website': 'Sito Web trovato',\n        'table.found_on_maps': 'Trovato su Google Maps',\n        'table.input_data': 'Input',\n        'table.normalized': 'Normalizzato'\n    }\n};\nfunction useTranslation() {\n    const { language } = (0,_contexts_language_context__WEBPACK_IMPORTED_MODULE_1__.useLanguage)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useTranslation.useMemo\": ()=>{\n            const t = {\n                \"useTranslation.useMemo.t\": (key, params)=>{\n                    let translation = translations[language][key] || translations.en[key];\n                    if (params) {\n                        Object.entries(params).forEach({\n                            \"useTranslation.useMemo.t\": (param)=>{\n                                let [param1, value] = param;\n                                translation = translation.replace(\"{\".concat(param1, \"}\"), String(value));\n                            }\n                        }[\"useTranslation.useMemo.t\"]);\n                    }\n                    return translation;\n                }\n            }[\"useTranslation.useMemo.t\"];\n            return {\n                t\n            };\n        }\n    }[\"useTranslation.useMemo\"], [\n        language\n    ]);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9ob29rcy91c2UtdHJhbnNsYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztvRUFFK0I7QUFDb0M7QUFpR25FLE1BQU1FLGVBQWlFO0lBQ3JFQyxJQUFJO1FBQ0ZDLE9BQU87UUFDUEMsVUFBVTtRQUNWLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEJDLGdCQUFnQjtRQUNoQkMsb0JBQW9CO1FBQ3BCQyxzQkFBc0I7UUFDdEJDLFlBQVk7UUFDWkMsZUFBZTtRQUNmQyxZQUFZO1FBQ1pDLGVBQWU7UUFDZkMsU0FBUztRQUNUQyxlQUFlO1FBQ2ZDLFVBQVU7UUFDVkMsTUFBTTtRQUNOQyxRQUFRO1FBQ1JDLGNBQWM7UUFDZEMsT0FBTztRQUNQQyxTQUFTO1FBQ1RDLFNBQVM7UUFDVEMsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLGNBQWM7UUFDZEMsZUFBZTtRQUNmQyxpQkFBaUI7UUFDakJDLGdCQUFnQjtRQUNoQkMsY0FBYztRQUNkQyxnQkFBZ0I7UUFDaEJDLGNBQWM7UUFDZEMsY0FBYztRQUNkQyxpQkFBaUI7UUFDakJDLG9CQUFvQjtRQUNwQkMsY0FBYztRQUNkQyxtQkFBbUI7UUFDbkJDLGNBQWM7UUFDZEMscUJBQXFCO1FBQ3JCQyxvQkFBb0I7UUFDcEJDLG9CQUFvQjtRQUNwQkMsZ0JBQWdCO1FBQ2hCQyxlQUFlO1FBQ2ZDLGdCQUFnQjtRQUNoQkMsZ0JBQWdCO1FBQ2hCQyxnQkFBZ0I7UUFDaEJDLHFCQUFxQjtRQUNyQkMsdUJBQXVCO1FBQ3ZCQyxtQkFBbUI7UUFDbkJDLGtCQUFrQjtRQUNsQkMsY0FBYztRQUNkQyxnQkFBZ0I7UUFDaEJDLG1CQUFtQjtRQUNuQkMsaUJBQWlCO1FBQ2pCQyxtQkFBbUI7UUFDbkJDLHlCQUF5QjtRQUN6QkMsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGVBQWU7UUFDZkMsa0NBQWtDO1FBQ2xDQyxzQkFBc0I7UUFDdEJDLHFCQUFxQjtRQUNyQkMsd0JBQXdCO1FBQ3hCQyxpQkFBaUI7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QUN2QixnQkFBZ0I7UUFDaEIsc0JBQXNCO1FBQ3RCLHFCQUFxQjtRQUNyQixpQkFBaUI7UUFDakIsb0JBQW9CO1FBQ3BCQyxjQUFjO1FBQ2RDLGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIsaUJBQWlCO1FBQ2pCLGdCQUFnQjtRQUNoQixtQkFBbUI7UUFDbkIscUJBQXFCO1FBQ3JCLGNBQWM7UUFDZCxZQUFZO1FBQ1osaUJBQWlCO1FBQ2pCLHFCQUFxQjtRQUNyQix1QkFBdUI7UUFDdkIscUJBQXFCO1FBQ3JCLGVBQWU7UUFDZixlQUFlO1FBQ2Ysb0JBQW9CO1FBQ3BCLG9CQUFvQjtRQUNwQix1QkFBdUI7UUFDdkIscUJBQXFCO1FBQ3JCLHVCQUF1QjtRQUN2Qix1QkFBdUI7UUFDdkIsb0JBQW9CO1FBQ3BCLG9CQUFvQjtJQUN0QjtBQUNGO0FBRU8sU0FBU0k7SUFDZCxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHeEUsdUVBQVdBO0lBRWhDLE9BQU9ELDhDQUFPQTtrQ0FBQztZQUNiLE1BQU0wRTs0Q0FBSSxDQUFDQyxLQUFxQkM7b0JBQzlCLElBQUlDLGNBQWMzRSxZQUFZLENBQUN1RSxTQUFTLENBQUNFLElBQUksSUFBSXpFLGFBQWFDLEVBQUUsQ0FBQ3dFLElBQUk7b0JBRXJFLElBQUlDLFFBQVE7d0JBQ1ZFLE9BQU9DLE9BQU8sQ0FBQ0gsUUFBUUksT0FBTzt3REFBQztvQ0FBQyxDQUFDQyxRQUFPQyxNQUFNO2dDQUM1Q0wsY0FBY0EsWUFBWU0sT0FBTyxDQUFDLElBQVUsT0FBTkYsUUFBTSxNQUFJRyxPQUFPRjs0QkFDekQ7O29CQUNGO29CQUVBLE9BQU9MO2dCQUNUOztZQUVBLE9BQU87Z0JBQUVIO1lBQUU7UUFDYjtpQ0FBRztRQUFDRDtLQUFTO0FBQ2YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGlsYW5cXERvY3VtZW50c1xcR2l0SHViXFxXZWItU2NyYXBwaW5nLUZyb250ZW5kXFxzcmNcXGhvb2tzXFx1c2UtdHJhbnNsYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcclxuXHJcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXNlTGFuZ3VhZ2UsIExhbmd1YWdlIH0gZnJvbSAnQC9jb250ZXh0cy9sYW5ndWFnZS1jb250ZXh0J1xyXG5cclxuZXhwb3J0IHR5cGUgVHJhbnNsYXRpb25LZXkgPSBcclxuICB8ICd0aXRsZSdcclxuICB8ICdzdWJ0aXRsZSdcclxuICB8ICdzdGFydF9zY3JhcGluZydcclxuICB8ICdzZWFyY2hfcGxhY2Vob2xkZXInXHJcbiAgfCAnbG9jYXRpb25fcGxhY2Vob2xkZXInXHJcbiAgfCAnY2l0eV9sYWJlbCdcclxuICB8ICdyZXN1bHRzX2ZvdW5kJ1xyXG4gIHwgJ25vX3Jlc3VsdHMnXHJcbiAgfCAnZXJyb3JfbG9hZGluZydcclxuICB8ICdlcnJvci51cGxvYWQnXHJcbiAgfCAnZXJyb3IucHJvY2Vzc2luZydcclxuICB8ICdsb2FkaW5nJ1xyXG4gIHwgJ3N0b3Bfc2NyYXBpbmcnXHJcbiAgfCAncHJvZ3Jlc3MnXHJcbiAgfCAnbmFtZSdcclxuICB8ICdyYXRpbmcnXHJcbiAgfCAncmF0aW5nX2NvdW50J1xyXG4gIHwgJ3Bob25lJ1xyXG4gIHwgJ2FkZHJlc3MnXHJcbiAgfCAnd2Vic2l0ZSdcclxuICB8ICdwcmljZV9yYW5nZSdcclxuICB8ICdjYXRlZ29yeSdcclxuICB8ICdtb25kYXlfaG91cnMnXHJcbiAgfCAndHVlc2RheV9ob3VycydcclxuICB8ICd3ZWRuZXNkYXlfaG91cnMnXHJcbiAgfCAndGh1cnNkYXlfaG91cnMnXHJcbiAgfCAnZnJpZGF5X2hvdXJzJ1xyXG4gIHwgJ3NhdHVyZGF5X2hvdXJzJ1xyXG4gIHwgJ3N1bmRheV9ob3VycydcclxuICB8ICd2aWV3X2RldGFpbHMnXHJcbiAgfCAnY29tcGxldGlvbl90aW1lJ1xyXG4gIHwgJ3Jlc3VsdHNfc3RhdGlzdGljcydcclxuICB8ICdzdWNjZXNzX3JhdGUnXHJcbiAgfCAncHJvY2Vzc2luZ19lcnJvcnMnXHJcbiAgfCAnZGF0YV9xdWFsaXR5J1xyXG4gIHwgJ3BlcmZvcm1hbmNlX21ldHJpY3MnXHJcbiAgfCAnY29tcGxldGlvbl9kZXRhaWxzJ1xyXG4gIHwgJ3N1Y2Nlc3NmdWxfcmVzdWx0cydcclxuICB8ICdmYWlsZWRfcmVzdWx0cydcclxuICB8ICdnb29nbGVfZXJyb3JzJ1xyXG4gIHwgJ25ldHdvcmtfZXJyb3JzJ1xyXG4gIHwgJ3BhcnNpbmdfZXJyb3JzJ1xyXG4gIHwgJ3RpbWVvdXRfZXJyb3JzJ1xyXG4gIHwgJ2F2Z19wcm9jZXNzaW5nX3RpbWUnXHJcbiAgfCAndG90YWxfcHJvY2Vzc2luZ190aW1lJ1xyXG4gIHwgJ2NvbXBsZXRlX3Byb2ZpbGVzJ1xyXG4gIHwgJ3BhcnRpYWxfcHJvZmlsZXMnXHJcbiAgfCAnbWlzc2luZ19kYXRhJ1xyXG4gIHwgJ2ludmFsaWRfZm9ybWF0J1xyXG4gIHwgJ3Jlc3VsdHNfYnJlYWtkb3duJ1xyXG4gIHwgJ2Vycm9yX2JyZWFrZG93bidcclxuICB8ICdsYW5ndWFnZV9zZWxlY3RvcidcclxuICB8ICdiYWNrZW5kX3NlcnZpY2VzX3N0YXR1cydcclxuICB8ICd1cCdcclxuICB8ICdkb3duJ1xyXG4gIHwgJ3N0YXJ0X2JhY2tlbmQnXHJcbiAgfCAnYXBpX3J1bm5pbmdfcmVkaXNfd29ya2VyX3Vua25vd24nXHJcbiAgfCAnY2hlY2tfZG9ja2VyX2NvbXBvc2UnXHJcbiAgfCAncHJvY2Vzc2luZ19jb21wbGV0ZSdcclxuICB8ICdzdWNjZXNzZnVsbHlfcHJvY2Vzc2VkJ1xyXG4gIHwgJ2J1c2luZXNzZXNfd2l0aCdcclxuICB8ICdzdWNjZXNzX3JhdGVfd2l0aF9kZXRhaWxzJ1xyXG4gIHwgJ3N1Y2Nlc3NmdWwnXHJcbiAgfCAnZmFpbGVkJ1xyXG4gIHwgJ3ZpZXdfZGV0YWlsZWRfcmVzdWx0cydcclxuICB8ICd1cGxvYWQudGl0bGUnXHJcbiAgfCAndXBsb2FkLmRlc2NyaXB0aW9uJ1xyXG4gIHwgJ3VwbG9hZC5zZWxlY3RGaWxlJ1xyXG4gIHwgJ3VwbG9hZC5idXR0b24nXHJcbiAgfCAndXBsb2FkLnVwbG9hZGluZydcclxuICB8ICdkb3dubG9hZF9jc3YnXHJcbiAgfCAnZXhwb3J0X3Jlc3VsdHMnXHJcbiAgfCAncmVzdWx0cy50aXRsZSdcclxuICB8ICd0YWJsZS5lbnRyaWVzJ1xyXG4gIHwgJ3RhYmxlLnNlYXJjaCdcclxuICB8ICd0YWJsZS5ub1Jlc3VsdHMnXHJcbiAgfCAndGFibGUucm93c1BlclBhZ2UnXHJcbiAgfCAndGFibGUucGFnZSdcclxuICB8ICd0YWJsZS5vZidcclxuICB8ICd0YWJsZS5zaG93aW5nJ1xyXG4gIHwgJ3Byb2Nlc3Npbmcuc3RhdHVzJ1xyXG4gIHwgJ3Byb2Nlc3NpbmcucHJvZ3Jlc3MnXHJcbiAgfCAncHJvY2Vzc2luZy5idXR0b24nXHJcbiAgfCAnZXJyb3IudGl0bGUnXHJcbiAgfCAnZXJyb3IucmV0cnknXHJcbiAgfCAndGFibGUuaW5wdXRfbmFtZSdcclxuICB8ICd0YWJsZS5mb3VuZF9uYW1lJ1xyXG4gIHwgJ3RhYmxlLmlucHV0X2FkZHJlc3MnXHJcbiAgfCAndGFibGUuZm91bmRfcGhvbmUnXHJcbiAgfCAndGFibGUuZm91bmRfd2Vic2l0ZSdcclxuICB8ICd0YWJsZS5mb3VuZF9vbl9tYXBzJ1xyXG4gIHwgJ3RhYmxlLmlucHV0X2RhdGEnXHJcbiAgfCAndGFibGUubm9ybWFsaXplZCdcclxuXHJcbmNvbnN0IHRyYW5zbGF0aW9uczogUmVjb3JkPExhbmd1YWdlLCBSZWNvcmQ8VHJhbnNsYXRpb25LZXksIHN0cmluZz4+ID0ge1xyXG4gIGVuOiB7XHJcbiAgICB0aXRsZTogJ1dlYiBTY3JhcGluZyBUb29sJyxcclxuICAgIHN1YnRpdGxlOiAnVXBsb2FkIHlvdXIgQ1NWIGZpbGUgYW5kIGdldCBlbmhhbmNlZCBidXNpbmVzcyBkYXRhJyxcclxuICAgICdlcnJvci51cGxvYWQnOiAnRmFpbGVkIHRvIHVwbG9hZCBmaWxlLiBQbGVhc2UgY2hlY2sgdGhlIGZpbGUgYW5kIHRyeSBhZ2Fpbi4nLFxyXG4gICAgJ2Vycm9yLnByb2Nlc3NpbmcnOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyB5b3VyIGZpbGUuJyxcclxuICAgIHN0YXJ0X3NjcmFwaW5nOiAnU3RhcnQgU2NyYXBpbmcnLFxyXG4gICAgc2VhcmNoX3BsYWNlaG9sZGVyOiAnU2VhcmNoIGZvciBidXNpbmVzc2VzLi4uJyxcclxuICAgIGxvY2F0aW9uX3BsYWNlaG9sZGVyOiAnRW50ZXIgbG9jYXRpb24nLFxyXG4gICAgY2l0eV9sYWJlbDogJ0NpdHknLFxyXG4gICAgcmVzdWx0c19mb3VuZDogJ3Jlc3VsdHMgZm91bmQnLFxyXG4gICAgbm9fcmVzdWx0czogJ05vIHJlc3VsdHMgZm91bmQnLFxyXG4gICAgZXJyb3JfbG9hZGluZzogJ0Vycm9yIGxvYWRpbmcgcmVzdWx0cycsXHJcbiAgICBsb2FkaW5nOiAnTG9hZGluZy4uLicsXHJcbiAgICBzdG9wX3NjcmFwaW5nOiAnU3RvcCBTY3JhcGluZycsXHJcbiAgICBwcm9ncmVzczogJ1Byb2dyZXNzJyxcclxuICAgIG5hbWU6ICdOYW1lJyxcclxuICAgIHJhdGluZzogJ1JhdGluZycsXHJcbiAgICByYXRpbmdfY291bnQ6ICdSZXZpZXdzJyxcclxuICAgIHBob25lOiAnUGhvbmUnLFxyXG4gICAgYWRkcmVzczogJ0FkZHJlc3MnLFxyXG4gICAgd2Vic2l0ZTogJ1dlYnNpdGUnLFxyXG4gICAgcHJpY2VfcmFuZ2U6ICdQcmljZSBSYW5nZScsXHJcbiAgICBjYXRlZ29yeTogJ0NhdGVnb3J5JyxcclxuICAgIG1vbmRheV9ob3VyczogJ01vbmRheScsXHJcbiAgICB0dWVzZGF5X2hvdXJzOiAnVHVlc2RheScsXHJcbiAgICB3ZWRuZXNkYXlfaG91cnM6ICdXZWRuZXNkYXknLFxyXG4gICAgdGh1cnNkYXlfaG91cnM6ICdUaHVyc2RheScsXHJcbiAgICBmcmlkYXlfaG91cnM6ICdGcmlkYXknLFxyXG4gICAgc2F0dXJkYXlfaG91cnM6ICdTYXR1cmRheScsXHJcbiAgICBzdW5kYXlfaG91cnM6ICdTdW5kYXknLFxyXG4gICAgdmlld19kZXRhaWxzOiAnVmlldyBEZXRhaWxzJyxcclxuICAgIGNvbXBsZXRpb25fdGltZTogJ0NvbXBsZXRpb24gVGltZScsXHJcbiAgICByZXN1bHRzX3N0YXRpc3RpY3M6ICdSZXN1bHRzIFN0YXRpc3RpY3MnLFxyXG4gICAgc3VjY2Vzc19yYXRlOiAnU3VjY2VzcyBSYXRlJyxcclxuICAgIHByb2Nlc3NpbmdfZXJyb3JzOiAnUHJvY2Vzc2luZyBFcnJvcnMnLFxyXG4gICAgZGF0YV9xdWFsaXR5OiAnRGF0YSBRdWFsaXR5JyxcclxuICAgIHBlcmZvcm1hbmNlX21ldHJpY3M6ICdQZXJmb3JtYW5jZSBNZXRyaWNzJyxcclxuICAgIGNvbXBsZXRpb25fZGV0YWlsczogJ0NvbXBsZXRpb24gRGV0YWlscycsICBcclxuICAgIHN1Y2Nlc3NmdWxfcmVzdWx0czogJ1N1Y2Nlc3NmdWwnLFxyXG4gICAgZmFpbGVkX3Jlc3VsdHM6ICdGYWlsZWQnLFxyXG4gICAgZ29vZ2xlX2Vycm9yczogJ0dvb2dsZSBFcnJvcnMnLFxyXG4gICAgbmV0d29ya19lcnJvcnM6ICdOZXR3b3JrIEVycm9ycycsXHJcbiAgICBwYXJzaW5nX2Vycm9yczogJ1BhcnNpbmcgRXJyb3JzJyxcclxuICAgIHRpbWVvdXRfZXJyb3JzOiAnVGltZW91dCBFcnJvcnMnLFxyXG4gICAgYXZnX3Byb2Nlc3NpbmdfdGltZTogJ0F2ZyBQcm9jZXNzaW5nIFRpbWUnLFxyXG4gICAgdG90YWxfcHJvY2Vzc2luZ190aW1lOiAnVG90YWwgUHJvY2Vzc2luZyBUaW1lJyxcclxuICAgIGNvbXBsZXRlX3Byb2ZpbGVzOiAnQ29tcGxldGUgUHJvZmlsZXMnLFxyXG4gICAgcGFydGlhbF9wcm9maWxlczogJ1BhcnRpYWwgUHJvZmlsZXMnLFxyXG4gICAgbWlzc2luZ19kYXRhOiAnTWlzc2luZyBEYXRhJyxcclxuICAgIGludmFsaWRfZm9ybWF0OiAnSW52YWxpZCBGb3JtYXQnLFxyXG4gICAgcmVzdWx0c19icmVha2Rvd246ICdSZXN1bHRzIEJyZWFrZG93bicsXHJcbiAgICBlcnJvcl9icmVha2Rvd246ICdFcnJvciBCcmVha2Rvd24nLFxyXG4gICAgbGFuZ3VhZ2Vfc2VsZWN0b3I6ICdMYW5ndWFnZScsXHJcbiAgICBiYWNrZW5kX3NlcnZpY2VzX3N0YXR1czogJ0JhY2tlbmQgU2VydmljZXMgU3RhdHVzJyxcclxuICAgIHVwOiAnVXAnLFxyXG4gICAgZG93bjogJ0Rvd24nLFxyXG4gICAgc3RhcnRfYmFja2VuZDogJ1N0YXJ0IGJhY2tlbmQnLFxyXG4gICAgYXBpX3J1bm5pbmdfcmVkaXNfd29ya2VyX3Vua25vd246ICdBUEkgaXMgcnVubmluZyBidXQgUmVkaXMvV29ya2VyIHN0YXR1cyB1bmtub3duLicsXHJcbiAgICBjaGVja19kb2NrZXJfY29tcG9zZTogJ0NoZWNrJyxcclxuICAgIHByb2Nlc3NpbmdfY29tcGxldGU6ICdQcm9jZXNzaW5nIENvbXBsZXRlIScsXHJcbiAgICBzdWNjZXNzZnVsbHlfcHJvY2Vzc2VkOiAnU3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCcsXHJcbiAgICBidXNpbmVzc2VzX3dpdGg6ICdidXNpbmVzc2VzIHdpdGgnLFxyXG4gICAgc3VjY2Vzc19yYXRlX3dpdGhfZGV0YWlsczogJ3N1Y2Nlc3MgcmF0ZScsXHJcbiAgICBzdWNjZXNzZnVsOiAnc3VjY2Vzc2Z1bCcsXHJcbiAgICBmYWlsZWQ6ICdmYWlsZWQnLFxyXG4gICAgdmlld19kZXRhaWxlZF9yZXN1bHRzOiAnVmlldyBEZXRhaWxlZCBSZXN1bHRzJyxcclxuICAgICd1cGxvYWQudGl0bGUnOiAnVXBsb2FkIENTViBGaWxlJyxcclxuICAgICd1cGxvYWQuZGVzY3JpcHRpb24nOiAnU2VsZWN0IGEgQ1NWIGZpbGUgY29udGFpbmluZyBidXNpbmVzcyBpbmZvcm1hdGlvbiB0byBwcm9jZXNzIGFuZCBlbmhhbmNlLicsXHJcbiAgICAndXBsb2FkLnNlbGVjdEZpbGUnOiAnU2VsZWN0IENTViBGaWxlJyxcclxuICAgICd1cGxvYWQuYnV0dG9uJzogJ1Byb2Nlc3MgRmlsZScsXHJcbiAgICAndXBsb2FkLnVwbG9hZGluZyc6ICdVcGxvYWRpbmcgZmlsZS4uLicsXHJcbiAgICBkb3dubG9hZF9jc3Y6ICdEb3dubG9hZCBDU1YnLFxyXG4gICAgZXhwb3J0X3Jlc3VsdHM6ICdFeHBvcnQgUmVzdWx0cycsXHJcbiAgICAncmVzdWx0cy50aXRsZSc6ICdSZXN1bHRzJyxcclxuICAgICd0YWJsZS5lbnRyaWVzJzogJ2VudHJpZXMnLFxyXG4gICAgJ3RhYmxlLnNlYXJjaCc6ICdTZWFyY2guLi4nLFxyXG4gICAgJ3RhYmxlLm5vUmVzdWx0cyc6ICdObyByZXN1bHRzIGZvdW5kLicsXHJcbiAgICAndGFibGUucm93c1BlclBhZ2UnOiAnUm93cyBwZXIgcGFnZScsXHJcbiAgICAndGFibGUucGFnZSc6ICdQYWdlJyxcclxuICAgICd0YWJsZS5vZic6ICdvZicsXHJcbiAgICAndGFibGUuc2hvd2luZyc6ICdTaG93aW5nJyxcclxuICAgICdwcm9jZXNzaW5nLnN0YXR1cyc6ICdQcm9jZXNzaW5nIFN0YXR1cycsXHJcbiAgICAncHJvY2Vzc2luZy5wcm9ncmVzcyc6ICdQcm9jZXNzaW5nIHtjb21wbGV0ZWR9IG9mIHt0b3RhbH0uLi4nLFxyXG4gICAgJ3Byb2Nlc3NpbmcuYnV0dG9uJzogJ1Byb2Nlc3NpbmcuLi4nLFxyXG4gICAgJ2Vycm9yLnRpdGxlJzogJ0Vycm9yJyxcclxuICAgICdlcnJvci5yZXRyeSc6ICdSZXRyeScsXHJcbiAgICAndGFibGUuaW5wdXRfbmFtZSc6ICdJbnB1dCBOYW1lJyxcclxuICAgICd0YWJsZS5mb3VuZF9uYW1lJzogJ0ZvdW5kIE5hbWUnLFxyXG4gICAgJ3RhYmxlLmlucHV0X2FkZHJlc3MnOiAnSW5wdXQgQWRkcmVzcycsXHJcbiAgICAndGFibGUuZm91bmRfcGhvbmUnOiAnRm91bmQgUGhvbmUnLFxyXG4gICAgJ3RhYmxlLmZvdW5kX3dlYnNpdGUnOiAnRm91bmQgV2Vic2l0ZScsXHJcbiAgICAndGFibGUuZm91bmRfb25fbWFwcyc6ICdGb3VuZCBvbiBHb29nbGUgTWFwcycsXHJcbiAgICAndGFibGUuaW5wdXRfZGF0YSc6ICdJbnB1dCcsXHJcbiAgICAndGFibGUubm9ybWFsaXplZCc6ICdOb3JtYWxpemVkJ1xyXG4gIH0sXHJcbiAgZnI6IHtcclxuICAgIHRpdGxlOiAnT3V0aWwgZGUgV2ViIFNjcmFwaW5nJyxcclxuICAgIHN1YnRpdGxlOiAnVMOpbMOpY2hhcmdleiB2b3RyZSBmaWNoaWVyIENTViBldCBvYnRlbmV6IGRlcyBkb25uw6llcyBkXFwnZW50cmVwcmlzZSBhbcOpbGlvcsOpZXMnLFxyXG4gICAgJ2Vycm9yLnVwbG9hZCc6ICfDiWNoZWMgZHUgdMOpbMOpY2hhcmdlbWVudCBkdSBmaWNoaWVyLiBWZXVpbGxleiB2w6lyaWZpZXIgbGUgZmljaGllciBldCByw6llc3NheWVyLicsXHJcbiAgICAnZXJyb3IucHJvY2Vzc2luZyc6ICdVbmUgZXJyZXVyIHNcXCdlc3QgcHJvZHVpdGUgbG9ycyBkdSB0cmFpdGVtZW50IGRlIHZvdHJlIGZpY2hpZXIuJyxcclxuICAgIHN0YXJ0X3NjcmFwaW5nOiAnRMOpbWFycmVyIGxlIFNjcmFwaW5nJyxcclxuICAgIHNlYXJjaF9wbGFjZWhvbGRlcjogJ1JlY2hlcmNoZXIgZGVzIGVudHJlcHJpc2VzLi4uJyxcclxuICAgIGxvY2F0aW9uX3BsYWNlaG9sZGVyOiAnRW50cmVyIGxcXCdlbXBsYWNlbWVudCcsXHJcbiAgICBjaXR5X2xhYmVsOiAnVmlsbGUnLFxyXG4gICAgcmVzdWx0c19mb3VuZDogJ3LDqXN1bHRhdHMgdHJvdXbDqXMnLFxyXG4gICAgbm9fcmVzdWx0czogJ0F1Y3VuIHLDqXN1bHRhdCB0cm91dsOpJyxcclxuICAgIGVycm9yX2xvYWRpbmc6ICdFcnJldXIgbG9ycyBkdSBjaGFyZ2VtZW50IGRlcyByw6lzdWx0YXRzJyxcclxuICAgIGxvYWRpbmc6ICdDaGFyZ2VtZW50Li4uJyxcclxuICAgIHN0b3Bfc2NyYXBpbmc6ICdBcnLDqnRlciBsZSBTY3JhcGluZycsXHJcbiAgICBwcm9ncmVzczogJ1Byb2dyw6hzJyxcclxuICAgIG5hbWU6ICdOb20nLFxyXG4gICAgcmF0aW5nOiAnTm90ZScsXHJcbiAgICByYXRpbmdfY291bnQ6ICdBdmlzJyxcclxuICAgIHBob25lOiAnVMOpbMOpcGhvbmUnLFxyXG4gICAgYWRkcmVzczogJ0FkcmVzc2UnLFxyXG4gICAgd2Vic2l0ZTogJ1NpdGUgV2ViJyxcclxuICAgIHByaWNlX3JhbmdlOiAnR2FtbWUgZGUgUHJpeCcsXHJcbiAgICBjYXRlZ29yeTogJ0NhdMOpZ29yaWUnLFxyXG4gICAgbW9uZGF5X2hvdXJzOiAnTHVuZGknLFxyXG4gICAgdHVlc2RheV9ob3VyczogJ01hcmRpJyxcclxuICAgIHdlZG5lc2RheV9ob3VyczogJ01lcmNyZWRpJyxcclxuICAgIHRodXJzZGF5X2hvdXJzOiAnSmV1ZGknLFxyXG4gICAgZnJpZGF5X2hvdXJzOiAnVmVuZHJlZGknLFxyXG4gICAgc2F0dXJkYXlfaG91cnM6ICdTYW1lZGknLFxyXG4gICAgc3VuZGF5X2hvdXJzOiAnRGltYW5jaGUnLFxyXG4gICAgdmlld19kZXRhaWxzOiAnVm9pciBsZXMgRMOpdGFpbHMnLFxyXG4gICAgY29tcGxldGlvbl90aW1lOiAnVGVtcHMgZFxcJ0FjaMOodmVtZW50JyxcclxuICAgIHJlc3VsdHNfc3RhdGlzdGljczogJ1N0YXRpc3RpcXVlcyBkZXMgUsOpc3VsdGF0cycsXHJcbiAgICBzdWNjZXNzX3JhdGU6ICdUYXV4IGRlIFLDqXVzc2l0ZScsXHJcbiAgICBwcm9jZXNzaW5nX2Vycm9yczogJ0VycmV1cnMgZGUgVHJhaXRlbWVudCcsXHJcbiAgICBkYXRhX3F1YWxpdHk6ICdRdWFsaXTDqSBkZXMgRG9ubsOpZXMnLFxyXG4gICAgcGVyZm9ybWFuY2VfbWV0cmljczogJ03DqXRyaXF1ZXMgZGUgUGVyZm9ybWFuY2UnLFxyXG4gICAgY29tcGxldGlvbl9kZXRhaWxzOiAnRMOpdGFpbHMgZFxcJ0FjaMOodmVtZW50JyxcclxuICAgIHN1Y2Nlc3NmdWxfcmVzdWx0czogJ1LDqXVzc2lzJyxcclxuICAgIGZhaWxlZF9yZXN1bHRzOiAnw4ljaG91w6lzJyxcclxuICAgIGdvb2dsZV9lcnJvcnM6ICdFcnJldXJzIEdvb2dsZScsXHJcbiAgICBuZXR3b3JrX2Vycm9yczogJ0VycmV1cnMgUsOpc2VhdScsXHJcbiAgICBwYXJzaW5nX2Vycm9yczogJ0VycmV1cnMgZFxcJ0FuYWx5c2UnLFxyXG4gICAgdGltZW91dF9lcnJvcnM6ICdFcnJldXJzIGRlIETDqWxhaScsXHJcbiAgICBhdmdfcHJvY2Vzc2luZ190aW1lOiAnVGVtcHMgZGUgVHJhaXRlbWVudCBNb3llbicsXHJcbiAgICB0b3RhbF9wcm9jZXNzaW5nX3RpbWU6ICdUZW1wcyBkZSBUcmFpdGVtZW50IFRvdGFsJyxcclxuICAgIGNvbXBsZXRlX3Byb2ZpbGVzOiAnUHJvZmlscyBDb21wbGV0cycsXHJcbiAgICBwYXJ0aWFsX3Byb2ZpbGVzOiAnUHJvZmlscyBQYXJ0aWVscycsXHJcbiAgICBtaXNzaW5nX2RhdGE6ICdEb25uw6llcyBNYW5xdWFudGVzJyxcclxuICAgIGludmFsaWRfZm9ybWF0OiAnRm9ybWF0IEludmFsaWRlJyxcclxuICAgIHJlc3VsdHNfYnJlYWtkb3duOiAnUsOpcGFydGl0aW9uIGRlcyBSw6lzdWx0YXRzJyxcclxuICAgIGVycm9yX2JyZWFrZG93bjogJ1LDqXBhcnRpdGlvbiBkZXMgRXJyZXVycycsXHJcbiAgICBsYW5ndWFnZV9zZWxlY3RvcjogJ0xhbmd1ZScsXHJcbiAgICBiYWNrZW5kX3NlcnZpY2VzX3N0YXR1czogJ8OJdGF0IGRlcyBTZXJ2aWNlcyBCYWNrZW5kJyxcclxuICAgIHVwOiAnRW4gbWFyY2hlJyxcclxuICAgIGRvd246ICdBcnLDqnTDqScsXHJcbiAgICBzdGFydF9iYWNrZW5kOiAnRMOpbWFycmVyIGxlIGJhY2tlbmQnLFxyXG4gICAgYXBpX3J1bm5pbmdfcmVkaXNfd29ya2VyX3Vua25vd246ICdMXFwnQVBJIGZvbmN0aW9ubmUgbWFpcyBsXFwnw6l0YXQgUmVkaXMvV29ya2VyIGVzdCBpbmNvbm51LicsXHJcbiAgICBjaGVja19kb2NrZXJfY29tcG9zZTogJ1bDqXJpZmllcicsXHJcbiAgICBwcm9jZXNzaW5nX2NvbXBsZXRlOiAnVHJhaXRlbWVudCBUZXJtaW7DqSEnLFxyXG4gICAgc3VjY2Vzc2Z1bGx5X3Byb2Nlc3NlZDogJ1RyYWl0w6kgYXZlYyBzdWNjw6hzJyxcclxuICAgIGJ1c2luZXNzZXNfd2l0aDogJ2VudHJlcHJpc2VzIGF2ZWMnLFxyXG4gICAgc3VjY2Vzc19yYXRlX3dpdGhfZGV0YWlsczogJ3RhdXggZGUgcsOpdXNzaXRlJyxcclxuICAgIHN1Y2Nlc3NmdWw6ICdyw6l1c3NpJyxcclxuICAgIGZhaWxlZDogJ8OpY2hvdcOpJyxcclxuICAgIHZpZXdfZGV0YWlsZWRfcmVzdWx0czogJ1ZvaXIgbGVzIFLDqXN1bHRhdHMgRMOpdGFpbGzDqXMnLFxyXG4gICAgJ3VwbG9hZC50aXRsZSc6ICdUw6lsw6ljaGFyZ2VyIHVuIEZpY2hpZXIgQ1NWJyxcclxuICAgICd1cGxvYWQuZGVzY3JpcHRpb24nOiAnU8OpbGVjdGlvbm5leiB1biBmaWNoaWVyIENTViBjb250ZW5hbnQgZGVzIGluZm9ybWF0aW9ucyBkXFwnZW50cmVwcmlzZSDDoCB0cmFpdGVyIGV0IGFtw6lsaW9yZXIuJyxcclxuICAgICd1cGxvYWQuc2VsZWN0RmlsZSc6ICdTw6lsZWN0aW9ubmVyIHVuIEZpY2hpZXIgQ1NWJyxcclxuICAgICd1cGxvYWQuYnV0dG9uJzogJ1RyYWl0ZXIgbGUgRmljaGllcicsXHJcbiAgICAndXBsb2FkLnVwbG9hZGluZyc6ICdUw6lsw6ljaGFyZ2VtZW50IGR1IGZpY2hpZXIuLi4nLFxyXG4gICAgZG93bmxvYWRfY3N2OiAnVMOpbMOpY2hhcmdlciBDU1YnLFxyXG4gICAgZXhwb3J0X3Jlc3VsdHM6ICdFeHBvcnRlciBsZXMgUsOpc3VsdGF0cycsXHJcbiAgICAncmVzdWx0cy50aXRsZSc6ICdSw6lzdWx0YXRzJyxcclxuICAgICd0YWJsZS5lbnRyaWVzJzogJ2VudHLDqWVzJyxcclxuICAgICd0YWJsZS5zZWFyY2gnOiAnUmVjaGVyY2hlci4uLicsXHJcbiAgICAndGFibGUubm9SZXN1bHRzJzogJ0F1Y3VuIHLDqXN1bHRhdCB0cm91dsOpLicsXHJcbiAgICAndGFibGUucm93c1BlclBhZ2UnOiAnTGlnbmVzIHBhciBwYWdlJyxcclxuICAgICd0YWJsZS5wYWdlJzogJ1BhZ2UnLFxyXG4gICAgJ3RhYmxlLm9mJzogJ2RlJyxcclxuICAgICd0YWJsZS5zaG93aW5nJzogJ0FmZmljaGFnZScsXHJcbiAgICAncHJvY2Vzc2luZy5zdGF0dXMnOiAnU3RhdHV0IGR1IHRyYWl0ZW1lbnQnLFxyXG4gICAgJ3Byb2Nlc3NpbmcucHJvZ3Jlc3MnOiAnVHJhaXRlbWVudCBkZSB7Y29tcGxldGVkfSBzdXIge3RvdGFsfS4uLicsXHJcbiAgICAncHJvY2Vzc2luZy5idXR0b24nOiAnVHJhaXRlbWVudC4uLicsXHJcbiAgICAnZXJyb3IudGl0bGUnOiAnRXJyZXVyJyxcclxuICAgICdlcnJvci5yZXRyeSc6ICdSw6llc3NheWVyJyxcclxuICAgICd0YWJsZS5pbnB1dF9uYW1lJzogJ05vbSBkZSBzYWlzaWUnLFxyXG4gICAgJ3RhYmxlLmZvdW5kX25hbWUnOiAnTm9tIHRyb3V2w6knLFxyXG4gICAgJ3RhYmxlLmlucHV0X2FkZHJlc3MnOiAnQWRyZXNzZSBkZSBzYWlzaWUnLFxyXG4gICAgJ3RhYmxlLmZvdW5kX3Bob25lJzogJ1TDqWzDqXBob25lIHRyb3V2w6knLFxyXG4gICAgJ3RhYmxlLmZvdW5kX3dlYnNpdGUnOiAnU2l0ZSBXZWIgdHJvdXbDqScsXHJcbiAgICAndGFibGUuZm91bmRfb25fbWFwcyc6ICdUcm91dsOpIHN1ciBHb29nbGUgTWFwcycsXHJcbiAgICAndGFibGUuaW5wdXRfZGF0YSc6ICdTYWlzaWUnLFxyXG4gICAgJ3RhYmxlLm5vcm1hbGl6ZWQnOiAnTm9ybWFsaXPDqSdcclxuICB9LFxyXG4gIGRlOiB7XHJcbiAgICB0aXRsZTogJ1dlYiBTY3JhcGluZyBUb29sJyxcclxuICAgIHN1YnRpdGxlOiAnTGFkZW4gU2llIElocmUgQ1NWLURhdGVpIGhvY2ggdW5kIGVyaGFsdGVuIFNpZSBlcndlaXRlcnRlIFVudGVybmVobWVuc2RhdGVuJyxcclxuICAgICdlcnJvci51cGxvYWQnOiAnRmVobGVyIGJlaW0gSG9jaGxhZGVuIGRlciBEYXRlaS4gQml0dGUgw7xiZXJwcsO8ZmVuIFNpZSBkaWUgRGF0ZWkgdW5kIHZlcnN1Y2hlbiBTaWUgZXMgZXJuZXV0LicsXHJcbiAgICAnZXJyb3IucHJvY2Vzc2luZyc6ICdCZWkgZGVyIFZlcmFyYmVpdHVuZyBJaHJlciBEYXRlaSBpc3QgZWluIEZlaGxlciBhdWZnZXRyZXRlbi4nLFxyXG4gICAgc3RhcnRfc2NyYXBpbmc6ICdTY3JhcGluZyBTdGFydGVuJyxcclxuICAgIHNlYXJjaF9wbGFjZWhvbGRlcjogJ05hY2ggVW50ZXJuZWhtZW4gc3VjaGVuLi4uJyxcclxuICAgIGxvY2F0aW9uX3BsYWNlaG9sZGVyOiAnU3RhbmRvcnQgZWluZ2ViZW4nLFxyXG4gICAgY2l0eV9sYWJlbDogJ1N0YWR0JyxcclxuICAgIHJlc3VsdHNfZm91bmQ6ICdFcmdlYm5pc3NlIGdlZnVuZGVuJyxcclxuICAgIG5vX3Jlc3VsdHM6ICdLZWluZSBFcmdlYm5pc3NlIGdlZnVuZGVuJyxcclxuICAgIGVycm9yX2xvYWRpbmc6ICdGZWhsZXIgYmVpbSBMYWRlbiBkZXIgRXJnZWJuaXNzZScsXHJcbiAgICBsb2FkaW5nOiAnTGFkZW4uLi4nLFxyXG4gICAgc3RvcF9zY3JhcGluZzogJ1NjcmFwaW5nIFN0b3BwZW4nLFxyXG4gICAgcHJvZ3Jlc3M6ICdGb3J0c2Nocml0dCcsXHJcbiAgICBuYW1lOiAnTmFtZScsXHJcbiAgICByYXRpbmc6ICdCZXdlcnR1bmcnLFxyXG4gICAgcmF0aW5nX2NvdW50OiAnQmV3ZXJ0dW5nZW4nLFxyXG4gICAgcGhvbmU6ICdUZWxlZm9uJyxcclxuICAgIGFkZHJlc3M6ICdBZHJlc3NlJyxcclxuICAgIHdlYnNpdGU6ICdXZWJzaXRlJyxcclxuICAgIHByaWNlX3JhbmdlOiAnUHJlaXNiZXJlaWNoJyxcclxuICAgIGNhdGVnb3J5OiAnS2F0ZWdvcmllJyxcclxuICAgIG1vbmRheV9ob3VyczogJ01vbnRhZycsXHJcbiAgICB0dWVzZGF5X2hvdXJzOiAnRGllbnN0YWcnLFxyXG4gICAgd2VkbmVzZGF5X2hvdXJzOiAnTWl0dHdvY2gnLFxyXG4gICAgdGh1cnNkYXlfaG91cnM6ICdEb25uZXJzdGFnJyxcclxuICAgIGZyaWRheV9ob3VyczogJ0ZyZWl0YWcnLFxyXG4gICAgc2F0dXJkYXlfaG91cnM6ICdTYW1zdGFnJyxcclxuICAgIHN1bmRheV9ob3VyczogJ1Nvbm50YWcnLFxyXG4gICAgdmlld19kZXRhaWxzOiAnRGV0YWlscyBBbnplaWdlbicsXHJcbiAgICBjb21wbGV0aW9uX3RpbWU6ICdBYnNjaGx1c3N6ZWl0JyxcclxuICAgIHJlc3VsdHNfc3RhdGlzdGljczogJ0VyZ2Vibmlzc3RhdGlzdGlrZW4nLFxyXG4gICAgc3VjY2Vzc19yYXRlOiAnRXJmb2xnc3JhdGUnLFxyXG4gICAgcHJvY2Vzc2luZ19lcnJvcnM6ICdWZXJhcmJlaXR1bmdzZmVobGVyJyxcclxuICAgIGRhdGFfcXVhbGl0eTogJ0RhdGVucXVhbGl0w6R0JyxcclxuICAgIHBlcmZvcm1hbmNlX21ldHJpY3M6ICdMZWlzdHVuZ3NtZXRyaWtlbicsXHJcbiAgICBjb21wbGV0aW9uX2RldGFpbHM6ICdBYnNjaGx1c3NkZXRhaWxzJyxcclxuICAgIHN1Y2Nlc3NmdWxfcmVzdWx0czogJ0VyZm9sZ3JlaWNoJyxcclxuICAgIGZhaWxlZF9yZXN1bHRzOiAnRmVobGdlc2NobGFnZW4nLFxyXG4gICAgZ29vZ2xlX2Vycm9yczogJ0dvb2dsZS1GZWhsZXInLFxyXG4gICAgbmV0d29ya19lcnJvcnM6ICdOZXR6d2Vya2ZlaGxlcicsXHJcbiAgICBwYXJzaW5nX2Vycm9yczogJ1BhcnNpbmctRmVobGVyJyxcclxuICAgIHRpbWVvdXRfZXJyb3JzOiAnVGltZW91dC1GZWhsZXInLFxyXG4gICAgYXZnX3Byb2Nlc3NpbmdfdGltZTogJ0R1cmNoc2Nobml0dGxpY2hlIFZlcmFyYmVpdHVuZ3N6ZWl0JyxcclxuICAgIHRvdGFsX3Byb2Nlc3NpbmdfdGltZTogJ0dlc2FtdGUgVmVyYXJiZWl0dW5nc3plaXQnLFxyXG4gICAgY29tcGxldGVfcHJvZmlsZXM6ICdWb2xsc3TDpG5kaWdlIFByb2ZpbGUnLFxyXG4gICAgcGFydGlhbF9wcm9maWxlczogJ1RlaWx3ZWlzZSBQcm9maWxlJyxcclxuICAgIG1pc3NpbmdfZGF0YTogJ0ZlaGxlbmRlIERhdGVuJyxcclxuICAgIGludmFsaWRfZm9ybWF0OiAnVW5nw7xsdGlnZXMgRm9ybWF0JyxcclxuICAgIHJlc3VsdHNfYnJlYWtkb3duOiAnRXJnZWJuaXNhdWZzY2hsw7xzc2VsdW5nJyxcclxuICAgIGVycm9yX2JyZWFrZG93bjogJ0ZlaGxlcmF1ZnNjaGzDvHNzZWx1bmcnLFxyXG4gICAgbGFuZ3VhZ2Vfc2VsZWN0b3I6ICdTcHJhY2hlJyxcclxuICAgIGJhY2tlbmRfc2VydmljZXNfc3RhdHVzOiAnQmFja2VuZC1EaWVuc3RlIFN0YXR1cycsXHJcbiAgICB1cDogJ0FrdGl2JyxcclxuICAgIGRvd246ICdJbmFrdGl2JyxcclxuICAgIHN0YXJ0X2JhY2tlbmQ6ICdCYWNrZW5kIHN0YXJ0ZW4nLFxyXG4gICAgYXBpX3J1bm5pbmdfcmVkaXNfd29ya2VyX3Vua25vd246ICdBUEkgbMOkdWZ0LCBhYmVyIFJlZGlzL1dvcmtlci1TdGF0dXMgdW5iZWthbm50LicsXHJcbiAgICBjaGVja19kb2NrZXJfY29tcG9zZTogJ8OcYmVycHLDvGZlbicsXHJcbiAgICBwcm9jZXNzaW5nX2NvbXBsZXRlOiAnVmVyYXJiZWl0dW5nIEFiZ2VzY2hsb3NzZW4hJyxcclxuICAgIHN1Y2Nlc3NmdWxseV9wcm9jZXNzZWQ6ICdFcmZvbGdyZWljaCB2ZXJhcmJlaXRldCcsXHJcbiAgICBidXNpbmVzc2VzX3dpdGg6ICdVbnRlcm5laG1lbiBtaXQnLFxyXG4gICAgc3VjY2Vzc19yYXRlX3dpdGhfZGV0YWlsczogJ0VyZm9sZ3NyYXRlJyxcclxuICAgIHN1Y2Nlc3NmdWw6ICdlcmZvbGdyZWljaCcsXHJcbiAgICBmYWlsZWQ6ICdmZWhsZ2VzY2hsYWdlbicsXHJcbiAgICB2aWV3X2RldGFpbGVkX3Jlc3VsdHM6ICdEZXRhaWxsaWVydGUgRXJnZWJuaXNzZSBBbnplaWdlbicsXHJcbiAgICAndXBsb2FkLnRpdGxlJzogJ0NTVi1EYXRlaSBIb2NobGFkZW4nLFxyXG4gICAgJ3VwbG9hZC5kZXNjcmlwdGlvbic6ICdXw6RobGVuIFNpZSBlaW5lIENTVi1EYXRlaSBtaXQgVW50ZXJuZWhtZW5zaW5mb3JtYXRpb25lbiB6dW0gVmVyYXJiZWl0ZW4gdW5kIFZlcmJlc3Nlcm4gYXVzLicsXHJcbiAgICAndXBsb2FkLnNlbGVjdEZpbGUnOiAnQ1NWLURhdGVpIEF1c3fDpGhsZW4nLFxyXG4gICAgJ3VwbG9hZC5idXR0b24nOiAnRGF0ZWkgVmVyYXJiZWl0ZW4nLFxyXG4gICAgJ3VwbG9hZC51cGxvYWRpbmcnOiAnRGF0ZWkgd2lyZCBob2NoZ2VsYWRlbi4uLicsXHJcbiAgICBkb3dubG9hZF9jc3Y6ICdDU1YgSGVydW50ZXJsYWRlbicsXHJcbiAgICBleHBvcnRfcmVzdWx0czogJ0VyZ2Vibmlzc2UgRXhwb3J0aWVyZW4nLFxyXG4gICAgJ3Jlc3VsdHMudGl0bGUnOiAnRXJnZWJuaXNzZScsXHJcbiAgICAndGFibGUuZW50cmllcyc6ICdFaW50csOkZ2UnLFxyXG4gICAgJ3RhYmxlLnNlYXJjaCc6ICdTdWNoZW4uLi4nLFxyXG4gICAgJ3RhYmxlLm5vUmVzdWx0cyc6ICdLZWluZSBFcmdlYm5pc3NlIGdlZnVuZGVuLicsXHJcbiAgICAndGFibGUucm93c1BlclBhZ2UnOiAnWmVpbGVuIHBybyBTZWl0ZScsXHJcbiAgICAndGFibGUucGFnZSc6ICdTZWl0ZScsXHJcbiAgICAndGFibGUub2YnOiAndm9uJyxcclxuICAgICd0YWJsZS5zaG93aW5nJzogJ0FuemVpZ2VuJyxcclxuICAgICdwcm9jZXNzaW5nLnN0YXR1cyc6ICdWZXJhcmJlaXR1bmdzc3RhdHVzJyxcclxuICAgICdwcm9jZXNzaW5nLnByb2dyZXNzJzogJ1ZlcmFyYmVpdHVuZyB2b24ge2NvbXBsZXRlZH0gdm9uIHt0b3RhbH0uLi4nLFxyXG4gICAgJ3Byb2Nlc3NpbmcuYnV0dG9uJzogJ1ZlcmFyYmVpdHVuZy4uLicsXHJcbiAgICAnZXJyb3IudGl0bGUnOiAnRmVobGVyJyxcclxuICAgICdlcnJvci5yZXRyeSc6ICdXaWVkZXJob2xlbicsXHJcbiAgICAndGFibGUuaW5wdXRfbmFtZSc6ICdFaW5nYWJlbmFtZScsXHJcbiAgICAndGFibGUuZm91bmRfbmFtZSc6ICdHZWZ1bmRlbmVyIE5hbWUnLFxyXG4gICAgJ3RhYmxlLmlucHV0X2FkZHJlc3MnOiAnRWluZ2FiZWFkcmVzc2UnLFxyXG4gICAgJ3RhYmxlLmZvdW5kX3Bob25lJzogJ0dlZnVuZGVuZXMgVGVsZWZvbicsXHJcbiAgICAndGFibGUuZm91bmRfd2Vic2l0ZSc6ICdHZWZ1bmRlbmUgV2Vic2l0ZScsXHJcbiAgICAndGFibGUuZm91bmRfb25fbWFwcyc6ICdBdWYgR29vZ2xlIE1hcHMgZ2VmdW5kZW4nLFxyXG4gICAgJ3RhYmxlLmlucHV0X2RhdGEnOiAnRWluZ2FiZScsXHJcbiAgICAndGFibGUubm9ybWFsaXplZCc6ICdOb3JtYWxpc2llcnQnXHJcbiAgfSxcclxuICBpdDoge1xyXG4gICAgdGl0bGU6ICdTdHJ1bWVudG8gZGkgV2ViIFNjcmFwaW5nJyxcclxuICAgIHN1YnRpdGxlOiAnQ2FyaWNhIGlsIHR1byBmaWxlIENTViBlIG90dGllbmkgZGF0aSBhemllbmRhbGkgbWlnbGlvcmF0aScsXHJcbiAgICAnZXJyb3IudXBsb2FkJzogJ0NhcmljYW1lbnRvIGRlbCBmaWxlIG5vbiByaXVzY2l0by4gQ29udHJvbGxhIGlsIGZpbGUgZSByaXByb3ZhLicsXHJcbiAgICAnZXJyb3IucHJvY2Vzc2luZyc6ICdTaSDDqCB2ZXJpZmljYXRvIHVuIGVycm9yZSBkdXJhbnRlIGxcXCdlbGFib3JhemlvbmUgZGVsIGZpbGUuJyxcclxuICAgIHN0YXJ0X3NjcmFwaW5nOiAnSW5pemlhIFNjcmFwaW5nJyxcclxuICAgIHNlYXJjaF9wbGFjZWhvbGRlcjogJ0NlcmNhIGF6aWVuZGUuLi4nLFxyXG4gICAgbG9jYXRpb25fcGxhY2Vob2xkZXI6ICdJbnNlcmlzY2kgcG9zaXppb25lJyxcclxuICAgIGNpdHlfbGFiZWw6ICdDaXR0w6AnLFxyXG4gICAgcmVzdWx0c19mb3VuZDogJ3Jpc3VsdGF0aSB0cm92YXRpJyxcclxuICAgIG5vX3Jlc3VsdHM6ICdOZXNzdW4gcmlzdWx0YXRvIHRyb3ZhdG8nLFxyXG4gICAgZXJyb3JfbG9hZGluZzogJ0Vycm9yZSBuZWwgY2FyaWNhbWVudG8gZGVpIHJpc3VsdGF0aScsXHJcbiAgICBsb2FkaW5nOiAnQ2FyaWNhbWVudG8uLi4nLFxyXG4gICAgc3RvcF9zY3JhcGluZzogJ0Zlcm1hIFNjcmFwaW5nJyxcclxuICAgIHByb2dyZXNzOiAnUHJvZ3Jlc3NvJyxcclxuICAgIG5hbWU6ICdOb21lJyxcclxuICAgIHJhdGluZzogJ1ZhbHV0YXppb25lJyxcclxuICAgIHJhdGluZ19jb3VudDogJ1JlY2Vuc2lvbmknLFxyXG4gICAgcGhvbmU6ICdUZWxlZm9ubycsXHJcbiAgICBhZGRyZXNzOiAnSW5kaXJpenpvJyxcclxuICAgIHdlYnNpdGU6ICdTaXRvIFdlYicsXHJcbiAgICBwcmljZV9yYW5nZTogJ0Zhc2NpYSBkaSBQcmV6em8nLFxyXG4gICAgY2F0ZWdvcnk6ICdDYXRlZ29yaWEnLFxyXG4gICAgbW9uZGF5X2hvdXJzOiAnTHVuZWTDrCcsXHJcbiAgICB0dWVzZGF5X2hvdXJzOiAnTWFydGVkw6wnLFxyXG4gICAgd2VkbmVzZGF5X2hvdXJzOiAnTWVyY29sZWTDrCcsXHJcbiAgICB0aHVyc2RheV9ob3VyczogJ0dpb3ZlZMOsJyxcclxuICAgIGZyaWRheV9ob3VyczogJ1ZlbmVyZMOsJyxcclxuICAgIHNhdHVyZGF5X2hvdXJzOiAnU2FiYXRvJyxcclxuICAgIHN1bmRheV9ob3VyczogJ0RvbWVuaWNhJyxcclxuICAgIHZpZXdfZGV0YWlsczogJ1Zpc3VhbGl6emEgRGV0dGFnbGknLFxyXG4gICAgY29tcGxldGlvbl90aW1lOiAnVGVtcG8gZGkgQ29tcGxldGFtZW50bycsXHJcbiAgICByZXN1bHRzX3N0YXRpc3RpY3M6ICdTdGF0aXN0aWNoZSBSaXN1bHRhdGknLFxyXG4gICAgc3VjY2Vzc19yYXRlOiAnVGFzc28gZGkgU3VjY2Vzc28nLFxyXG4gICAgcHJvY2Vzc2luZ19lcnJvcnM6ICdFcnJvcmkgZGkgRWxhYm9yYXppb25lJyxcclxuICAgIGRhdGFfcXVhbGl0eTogJ1F1YWxpdMOgIGRlaSBEYXRpJyxcclxuICAgIHBlcmZvcm1hbmNlX21ldHJpY3M6ICdNZXRyaWNoZSBkaSBQZXJmb3JtYW5jZScsXHJcbiAgICBjb21wbGV0aW9uX2RldGFpbHM6ICdEZXR0YWdsaSBkaSBDb21wbGV0YW1lbnRvJyxcclxuICAgIHN1Y2Nlc3NmdWxfcmVzdWx0czogJ1JpdXNjaXRpJyxcclxuICAgIGZhaWxlZF9yZXN1bHRzOiAnRmFsbGl0aScsXHJcbiAgICBnb29nbGVfZXJyb3JzOiAnRXJyb3JpIEdvb2dsZScsXHJcbiAgICBuZXR3b3JrX2Vycm9yczogJ0Vycm9yaSBkaSBSZXRlJyxcclxuICAgIHBhcnNpbmdfZXJyb3JzOiAnRXJyb3JpIGRpIFBhcnNpbmcnLFxyXG4gICAgdGltZW91dF9lcnJvcnM6ICdFcnJvcmkgZGkgVGltZW91dCcsXHJcbiAgICBhdmdfcHJvY2Vzc2luZ190aW1lOiAnVGVtcG8gZGkgRWxhYm9yYXppb25lIE1lZGlvJyxcclxuICAgIHRvdGFsX3Byb2Nlc3NpbmdfdGltZTogJ1RlbXBvIGRpIEVsYWJvcmF6aW9uZSBUb3RhbGUnLFxyXG4gICAgY29tcGxldGVfcHJvZmlsZXM6ICdQcm9maWxpIENvbXBsZXRpJyxcclxuICAgIHBhcnRpYWxfcHJvZmlsZXM6ICdQcm9maWxpIFBhcnppYWxpJyxcclxuICAgIG1pc3NpbmdfZGF0YTogJ0RhdGkgTWFuY2FudGknLFxyXG4gICAgaW52YWxpZF9mb3JtYXQ6ICdGb3JtYXRvIE5vbiBWYWxpZG8nLFxyXG4gICAgcmVzdWx0c19icmVha2Rvd246ICdTdWRkaXZpc2lvbmUgUmlzdWx0YXRpJyxcclxuICAgIGVycm9yX2JyZWFrZG93bjogJ1N1ZGRpdmlzaW9uZSBFcnJvcmknLFxyXG4gICAgbGFuZ3VhZ2Vfc2VsZWN0b3I6ICdMaW5ndWEnLFxyXG4gICAgYmFja2VuZF9zZXJ2aWNlc19zdGF0dXM6ICdTdGF0byBTZXJ2aXppIEJhY2tlbmQnLFxyXG4gICAgdXA6ICdBdHRpdm8nLFxyXG4gICAgZG93bjogJ0luYXR0aXZvJyxcclxuICAgIHN0YXJ0X2JhY2tlbmQ6ICdBdnZpYSBiYWNrZW5kJyxcclxuICAgIGFwaV9ydW5uaW5nX3JlZGlzX3dvcmtlcl91bmtub3duOiAnQVBJIMOoIGluIGVzZWN1emlvbmUgbWEgc3RhdG8gUmVkaXMvV29ya2VyIHNjb25vc2NpdXRvLicsXHJcbiAgICBjaGVja19kb2NrZXJfY29tcG9zZTogJ0NvbnRyb2xsYScsXHJcbiAgICBwcm9jZXNzaW5nX2NvbXBsZXRlOiAnRWxhYm9yYXppb25lIENvbXBsZXRhdGEhJyxcclxuICAgIHN1Y2Nlc3NmdWxseV9wcm9jZXNzZWQ6ICdFbGFib3JhdG8gY29uIHN1Y2Nlc3NvJyxcclxuICAgIGJ1c2luZXNzZXNfd2l0aDogJ2F6aWVuZGUgY29uJyxcclxuICAgIHN1Y2Nlc3NfcmF0ZV93aXRoX2RldGFpbHM6ICd0YXNzbyBkaSBzdWNjZXNzbycsXHJcbiAgICBzdWNjZXNzZnVsOiAncml1c2NpdG8nLFxyXG4gICAgZmFpbGVkOiAnZmFsbGl0bycsXHJcbiAgICB2aWV3X2RldGFpbGVkX3Jlc3VsdHM6ICdWaXN1YWxpenphIFJpc3VsdGF0aSBEZXR0YWdsaWF0aScsXHJcbiAgICAndXBsb2FkLnRpdGxlJzogJ0NhcmljYSBGaWxlIENTVicsXHJcbiAgICAndXBsb2FkLmRlc2NyaXB0aW9uJzogJ1NlbGV6aW9uYSB1biBmaWxlIENTViBjb250ZW5lbnRlIGluZm9ybWF6aW9uaSBhemllbmRhbGkgZGEgZWxhYm9yYXJlIGUgbWlnbGlvcmFyZS4nLFxyXG4gICAgJ3VwbG9hZC5zZWxlY3RGaWxlJzogJ1NlbGV6aW9uYSBGaWxlIENTVicsXHJcbiAgICAndXBsb2FkLmJ1dHRvbic6ICdFbGFib3JhIEZpbGUnLFxyXG4gICAgJ3VwbG9hZC51cGxvYWRpbmcnOiAnQ2FyaWNhbWVudG8gZmlsZS4uLicsXHJcbiAgICBkb3dubG9hZF9jc3Y6ICdTY2FyaWNhIENTVicsXHJcbiAgICBleHBvcnRfcmVzdWx0czogJ0VzcG9ydGEgUmlzdWx0YXRpJyxcclxuICAgICdyZXN1bHRzLnRpdGxlJzogJ1Jpc3VsdGF0aScsXHJcbiAgICAndGFibGUuZW50cmllcyc6ICd2b2NpJyxcclxuICAgICd0YWJsZS5zZWFyY2gnOiAnQ2VyY2EuLi4nLFxyXG4gICAgJ3RhYmxlLm5vUmVzdWx0cyc6ICdOZXNzdW4gcmlzdWx0YXRvIHRyb3ZhdG8uJyxcclxuICAgICd0YWJsZS5yb3dzUGVyUGFnZSc6ICdSaWdoZSBwZXIgcGFnaW5hJyxcclxuICAgICd0YWJsZS5wYWdlJzogJ1BhZ2luYScsXHJcbiAgICAndGFibGUub2YnOiAnZGknLFxyXG4gICAgJ3RhYmxlLnNob3dpbmcnOiAnTW9zdHJhbmRvJyxcclxuICAgICdwcm9jZXNzaW5nLnN0YXR1cyc6ICdTdGF0byBkZWwgcHJvY2Vzc28nLFxyXG4gICAgJ3Byb2Nlc3NpbmcucHJvZ3Jlc3MnOiAnRWxhYm9yYXppb25lIGRpIHtjb21wbGV0ZWR9IHN1IHt0b3RhbH0uLi4nLFxyXG4gICAgJ3Byb2Nlc3NpbmcuYnV0dG9uJzogJ0VsYWJvcmF6aW9uZS4uLicsXHJcbiAgICAnZXJyb3IudGl0bGUnOiAnRXJyb3JlJyxcclxuICAgICdlcnJvci5yZXRyeSc6ICdSaXByb3ZhJyxcclxuICAgICd0YWJsZS5pbnB1dF9uYW1lJzogJ05vbWUgZGkgaW5wdXQnLFxyXG4gICAgJ3RhYmxlLmZvdW5kX25hbWUnOiAnTm9tZSB0cm92YXRvJyxcclxuICAgICd0YWJsZS5pbnB1dF9hZGRyZXNzJzogJ0luZGlyaXp6byBkaSBpbnB1dCcsXHJcbiAgICAndGFibGUuZm91bmRfcGhvbmUnOiAnVGVsZWZvbm8gdHJvdmF0bycsXHJcbiAgICAndGFibGUuZm91bmRfd2Vic2l0ZSc6ICdTaXRvIFdlYiB0cm92YXRvJyxcclxuICAgICd0YWJsZS5mb3VuZF9vbl9tYXBzJzogJ1Ryb3ZhdG8gc3UgR29vZ2xlIE1hcHMnLFxyXG4gICAgJ3RhYmxlLmlucHV0X2RhdGEnOiAnSW5wdXQnLFxyXG4gICAgJ3RhYmxlLm5vcm1hbGl6ZWQnOiAnTm9ybWFsaXp6YXRvJ1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYW5zbGF0aW9uKCkge1xyXG4gIGNvbnN0IHsgbGFuZ3VhZ2UgfSA9IHVzZUxhbmd1YWdlKClcclxuICBcclxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XHJcbiAgICBjb25zdCB0ID0gKGtleTogVHJhbnNsYXRpb25LZXksIHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlcj4pOiBzdHJpbmcgPT4ge1xyXG4gICAgICBsZXQgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbnNbbGFuZ3VhZ2VdW2tleV0gfHwgdHJhbnNsYXRpb25zLmVuW2tleV1cclxuICAgICAgXHJcbiAgICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhwYXJhbXMpLmZvckVhY2goKFtwYXJhbSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uLnJlcGxhY2UoYHske3BhcmFtfX1gLCBTdHJpbmcodmFsdWUpKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0cmFuc2xhdGlvblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4geyB0IH1cclxuICB9LCBbbGFuZ3VhZ2VdKVxyXG59Il0sIm5hbWVzIjpbInVzZU1lbW8iLCJ1c2VMYW5ndWFnZSIsInRyYW5zbGF0aW9ucyIsImVuIiwidGl0bGUiLCJzdWJ0aXRsZSIsInN0YXJ0X3NjcmFwaW5nIiwic2VhcmNoX3BsYWNlaG9sZGVyIiwibG9jYXRpb25fcGxhY2Vob2xkZXIiLCJjaXR5X2xhYmVsIiwicmVzdWx0c19mb3VuZCIsIm5vX3Jlc3VsdHMiLCJlcnJvcl9sb2FkaW5nIiwibG9hZGluZyIsInN0b3Bfc2NyYXBpbmciLCJwcm9ncmVzcyIsIm5hbWUiLCJyYXRpbmciLCJyYXRpbmdfY291bnQiLCJwaG9uZSIsImFkZHJlc3MiLCJ3ZWJzaXRlIiwicHJpY2VfcmFuZ2UiLCJjYXRlZ29yeSIsIm1vbmRheV9ob3VycyIsInR1ZXNkYXlfaG91cnMiLCJ3ZWRuZXNkYXlfaG91cnMiLCJ0aHVyc2RheV9ob3VycyIsImZyaWRheV9ob3VycyIsInNhdHVyZGF5X2hvdXJzIiwic3VuZGF5X2hvdXJzIiwidmlld19kZXRhaWxzIiwiY29tcGxldGlvbl90aW1lIiwicmVzdWx0c19zdGF0aXN0aWNzIiwic3VjY2Vzc19yYXRlIiwicHJvY2Vzc2luZ19lcnJvcnMiLCJkYXRhX3F1YWxpdHkiLCJwZXJmb3JtYW5jZV9tZXRyaWNzIiwiY29tcGxldGlvbl9kZXRhaWxzIiwic3VjY2Vzc2Z1bF9yZXN1bHRzIiwiZmFpbGVkX3Jlc3VsdHMiLCJnb29nbGVfZXJyb3JzIiwibmV0d29ya19lcnJvcnMiLCJwYXJzaW5nX2Vycm9ycyIsInRpbWVvdXRfZXJyb3JzIiwiYXZnX3Byb2Nlc3NpbmdfdGltZSIsInRvdGFsX3Byb2Nlc3NpbmdfdGltZSIsImNvbXBsZXRlX3Byb2ZpbGVzIiwicGFydGlhbF9wcm9maWxlcyIsIm1pc3NpbmdfZGF0YSIsImludmFsaWRfZm9ybWF0IiwicmVzdWx0c19icmVha2Rvd24iLCJlcnJvcl9icmVha2Rvd24iLCJsYW5ndWFnZV9zZWxlY3RvciIsImJhY2tlbmRfc2VydmljZXNfc3RhdHVzIiwidXAiLCJkb3duIiwic3RhcnRfYmFja2VuZCIsImFwaV9ydW5uaW5nX3JlZGlzX3dvcmtlcl91bmtub3duIiwiY2hlY2tfZG9ja2VyX2NvbXBvc2UiLCJwcm9jZXNzaW5nX2NvbXBsZXRlIiwic3VjY2Vzc2Z1bGx5X3Byb2Nlc3NlZCIsImJ1c2luZXNzZXNfd2l0aCIsInN1Y2Nlc3NfcmF0ZV93aXRoX2RldGFpbHMiLCJzdWNjZXNzZnVsIiwiZmFpbGVkIiwidmlld19kZXRhaWxlZF9yZXN1bHRzIiwiZG93bmxvYWRfY3N2IiwiZXhwb3J0X3Jlc3VsdHMiLCJmciIsImRlIiwiaXQiLCJ1c2VUcmFuc2xhdGlvbiIsImxhbmd1YWdlIiwidCIsImtleSIsInBhcmFtcyIsInRyYW5zbGF0aW9uIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJwYXJhbSIsInZhbHVlIiwicmVwbGFjZSIsIlN0cmluZyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/use-translation.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: () => (/* binding */ ApiService),\n/* harmony export */   getProgress: () => (/* binding */ getProgress)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ \"(app-pages-browser)/./src/lib/debug.ts\");\n\n\n// Base URL del backend - usar proxy de Next.js en desarrollo para evitar CORS\nconst API_BASE_URL =  false ? 0 : '/api/v1' // Usar proxy de Next.js en desarrollo\n;\nconsole.log('🔧 API Configuration:');\nconsole.log('📍 Base URL:', API_BASE_URL);\nconsole.log('🌍 Environment:', \"development\");\nconsole.log('📝 Next Public API URL:', \"http://localhost:3000/api/v1\");\n// Configurar instancia de axios\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 60000,\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    },\n    withCredentials: false\n});\n// Interceptor para debug de requests\napiClient.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log('🔍 Request Debug:');\n    console.log('📍 URL:', config.url);\n    console.log('🌐 Base URL:', config.baseURL);\n    console.log('🎯 Full URL:', \"\".concat(config.baseURL).concat(config.url));\n    console.log('📝 Method:', (_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase());\n    return config;\n}, (error)=>{\n    console.error('❌ Request Error:', error);\n    return Promise.reject(error);\n});\n// Interceptor para debug de responses\napiClient.interceptors.response.use((response)=>{\n    console.log('✅ Response Success:', response.status, response.config.url);\n    return response;\n}, (error)=>{\n    var _error_config, _error_config1, _error_config2, _error_config3, _error_response, _error_response1;\n    console.error('❌ Response Error:');\n    console.error('📍 URL:', (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url);\n    console.error('🌐 Base URL:', (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.baseURL);\n    console.error('🎯 Full URL:', \"\".concat((_error_config2 = error.config) === null || _error_config2 === void 0 ? void 0 : _error_config2.baseURL).concat((_error_config3 = error.config) === null || _error_config3 === void 0 ? void 0 : _error_config3.url));\n    console.error('📊 Status:', (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status);\n    console.error('📄 Response:', (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.data);\n    return Promise.reject(error);\n});\n// Utilidad para obtener el progreso del backend (simplificada para Node.js backend)\nfunction getProgress(batchStatus) {\n    // El nuevo backend ya proporciona toda la información de progreso estructurada\n    return {\n        completed: batchStatus.progress.completed,\n        total: batchStatus.progress.total,\n        percentage: batchStatus.progress.percentage\n    };\n}\n// Servicios API\nclass ApiService {\n    /**\r\n   * Sube un archivo CSV al backend para procesamiento\r\n   * @param file - Archivo CSV a procesar\r\n   * @returns Respuesta con el batchId\r\n   */ static async uploadFile(file) {\n        const formData = new FormData();\n        formData.append('file', file);\n        try {\n            console.log('🚀 Starting file upload:');\n            console.log('📄 File:', file.name, 'Size:', file.size, 'Type:', file.type);\n            console.log('🌐 Full URL will be:', \"\".concat(API_BASE_URL, \"/scraping-batch\"));\n            console.log('🔗 Axios baseURL:', apiClient.defaults.baseURL);\n            const response = await apiClient.post('/scraping-batch', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n                timeout: 120000,\n                onUploadProgress: (progressEvent)=>{\n                    if (progressEvent.total) {\n                        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                        console.log('Upload progress:', percentCompleted + '%');\n                    }\n                }\n            });\n            console.log('Upload successful:', response.data);\n            return response.data;\n        } catch (error) {\n            var _error_response, _error_response1, _error_response2, _error_response3, _error_response4, _error_response5, _error_message;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('Upload error details:', {\n                message: error.message,\n                code: error.code,\n                status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n                statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n                data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data\n            });\n            // Manejo específico de errores\n            if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\n                throw new Error('❌ Backend server is not running on port 3000. Please start your backend server with: docker-compose up --build -d');\n            } else if (error.code === 'ECONNABORTED') {\n                throw new Error('⏱️ Upload timeout - file too large or connection slow');\n            } else if (((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.status) === 413) {\n                throw new Error('📦 File too large');\n            } else if (((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.status) === 415) {\n                throw new Error('📄 Invalid file type - only CSV files are allowed');\n            } else if (((_error_response5 = error.response) === null || _error_response5 === void 0 ? void 0 : _error_response5.status) === 404) {\n                throw new Error('🔍 Backend endpoint not found. Make sure backend is running and accessible.');\n            } else if (error.code === 'ERR_NETWORK' || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('CORS'))) {\n                throw new Error('🌐 CORS Error: Backend needs CORS configuration. The backend is running but blocking browser requests.');\n            } else if (error.name === 'AxiosError' && !error.response) {\n                throw new Error('🔒 Connection blocked - possible CORS issue. Backend is running but not accessible from browser.');\n            } else {\n                var _error_response_data, _error_response6;\n                throw new Error(((_error_response6 = error.response) === null || _error_response6 === void 0 ? void 0 : (_error_response_data = _error_response6.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"\\uD83D\\uDEAB Upload failed: \".concat(error.message));\n            }\n        }\n    }\n    /**\r\n   * Obtiene el estado actual de un batch de procesamiento\r\n   * @param batchId - ID del batch a consultar\r\n   * @returns Estado actual del batch\r\n   */ static async getBatchStatus(batchId) {\n        try {\n            const response = await apiClient.get(\"/scraping-batch/\".concat(batchId));\n            return response.data;\n        } catch (error) {\n            var _error_response;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('Error fetching batch status:', error);\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 404) {\n                throw new Error('❓ Batch not found. It may have expired or been processed.');\n            } else {\n                var _error_response_data, _error_response1;\n                throw new Error(\"Failed to fetch batch status: \".concat(((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || error.message));\n            }\n        }\n    }\n    /**\r\n   * 🆕 Exporta y descarga CSV limpio desde el backend\r\n   * @param batchId - ID del batch a exportar\r\n   * @returns void - Inicia descarga automática del archivo\r\n   */ static async exportCleanCSV(batchId) {\n        try {\n            console.log('🎯 Starting CSV export for batch:', batchId);\n            const response = await apiClient.get(\"/scraping-batch/\".concat(batchId, \"/export\"), {\n                responseType: 'blob',\n                headers: {\n                    'Accept': 'text/csv'\n                },\n                timeout: 60000\n            });\n            // Crear un blob y generar descarga automática\n            const blob = new Blob([\n                response.data\n            ], {\n                type: 'text/csv;charset=utf-8;'\n            });\n            const url = window.URL.createObjectURL(blob);\n            // Crear elemento de descarga temporal\n            const link = document.createElement('a');\n            link.href = url;\n            // Generar nombre de archivo con timestamp\n            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\n            link.download = \"scraping-results-\".concat(timestamp, \".csv\");\n            // Agregar al DOM temporalmente y hacer click\n            document.body.appendChild(link);\n            link.click();\n            // Limpiar\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(url);\n            console.log('✅ CSV exported successfully');\n        } catch (error) {\n            var _error_response, _error_response1;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('CSV export error:', error);\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 404) {\n                throw new Error('❓ Batch not found or expired');\n            } else if (((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 400) {\n                throw new Error('🚫 Batch not ready for export yet');\n            } else {\n                var _error_response_data, _error_response2;\n                throw new Error(\"\\uD83D\\uDEAB Export failed: \".concat(((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : (_error_response_data = _error_response2.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || error.message));\n            }\n        }\n    }\n    /**\r\n   * 🆕 Valida el formato y contenido del archivo CSV\r\n   * @param file - Archivo CSV a validar\r\n   * @param t - Función de traducción (opcional)\r\n   * @returns Resultado de la validación\r\n   */ static async validateCSV(file, t) {\n        return new Promise((resolve)=>{\n            const reader = new FileReader();\n            reader.onload = (e)=>{\n                var _e_target;\n                const text = (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result;\n                const lines = text.split('\\n').filter((line)=>line.trim());\n                if (lines.length === 0) {\n                    resolve({\n                        isValid: false,\n                        errors: [\n                            t ? t('csv.file_empty') : 'File is empty'\n                        ],\n                        warnings: [],\n                        rowCount: 0,\n                        columns: [],\n                        requiredColumns: [\n                            'name',\n                            'address',\n                            'city'\n                        ],\n                        missingColumns: [\n                            'name',\n                            'address',\n                            'city'\n                        ]\n                    });\n                    return;\n                }\n                // Parse header\n                const header = lines[0].split(',').map((col)=>col.trim().replace(/[\"']/g, ''));\n                const requiredColumns = [\n                    'name',\n                    'address',\n                    'city'\n                ];\n                const optionalColumns = [\n                    'postal_code'\n                ];\n                const allValidColumns = [\n                    ...requiredColumns,\n                    ...optionalColumns\n                ];\n                // Validaciones\n                const errors = [];\n                const warnings = [];\n                const missingColumns = requiredColumns.filter((col)=>!header.some((h)=>h.toLowerCase().includes(col.toLowerCase())));\n                // Validar columnas requeridas\n                if (missingColumns.length > 0) {\n                    errors.push(t ? t('csv.required_columns_missing', {\n                        columns: missingColumns.join(', ')\n                    }) : \"Missing required columns: \".concat(missingColumns.join(', ')));\n                }\n                // Validar número mínimo de filas\n                if (lines.length < 2) {\n                    errors.push(t ? t('csv.minimum_rows_required') : 'CSV must have at least one data row besides the header');\n                }\n                // Validar número máximo de filas (límite recomendado)\n                if (lines.length > 1001) {\n                    warnings.push(t ? t('csv.maximum_rows_warning', {\n                        count: lines.length - 1\n                    }) : \"File has \".concat(lines.length - 1, \" rows. Maximum 1000 recommended for better performance\"));\n                }\n                // Validar formato de datos (muestra de las primeras 5 filas)\n                const sampleRows = lines.slice(1, 6);\n                sampleRows.forEach((row, index)=>{\n                    const cells = row.split(',');\n                    if (cells.length !== header.length) {\n                        errors.push(t ? t('csv.column_mismatch', {\n                            row: index + 2,\n                            actual: cells.length,\n                            expected: header.length\n                        }) : \"Row \".concat(index + 2, \": Number of columns does not match header (\").concat(cells.length, \" vs \").concat(header.length, \")\"));\n                    }\n                    // Validar que el nombre no esté vacío\n                    const nameIndex = header.findIndex((h)=>h.toLowerCase().includes('name'));\n                    if (nameIndex >= 0 && (!cells[nameIndex] || cells[nameIndex].trim().replace(/[\"']/g, '') === '')) {\n                        errors.push(t ? t('csv.empty_business_name', {\n                            row: index + 2\n                        }) : \"Row \".concat(index + 2, \": Business name cannot be empty\"));\n                    }\n                });\n                resolve({\n                    isValid: errors.length === 0,\n                    errors,\n                    warnings,\n                    rowCount: lines.length - 1,\n                    columns: header,\n                    requiredColumns,\n                    missingColumns\n                });\n            };\n            reader.onerror = ()=>{\n                resolve({\n                    isValid: false,\n                    errors: [\n                        t ? t('csv.file_read_error') : 'Error reading file'\n                    ],\n                    warnings: [],\n                    rowCount: 0,\n                    columns: [],\n                    requiredColumns: [\n                        'name',\n                        'address',\n                        'city'\n                    ],\n                    missingColumns: [\n                        'name',\n                        'address',\n                        'city'\n                    ]\n                });\n            };\n            reader.readAsText(file);\n        });\n    }\n    /**\r\n   * 🆕 Genera y descarga una plantilla CSV de ejemplo\r\n   * @returns void - Inicia descarga del archivo plantilla\r\n   */ static downloadCSVTemplate() {\n        const template = [\n            'name,address,city,postal_code',\n            'McDonald\\'s Bahnhofstrasse,\"Bahnhofstrasse 120\",Zürich,8001',\n            'Starbucks Paradeplatz,\"Paradeplatz 4\",Zürich,8001',\n            'Burger King Limmatquai,\"Limmatquai 66\",Zürich,8001'\n        ].join('\\n');\n        const blob = new Blob([\n            template\n        ], {\n            type: 'text/csv;charset=utf-8;'\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'plantilla-scraping.csv';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n        console.log('✅ Plantilla CSV descargada');\n    }\n    /**\r\n   * 🆕 Verifica el estado real de todos los servicios del backend\r\n   * @returns Estado detallado de cada servicio\r\n   */ static async checkServicesStatus() {\n        const result = {\n            api: false,\n            redis: false,\n            worker: false,\n            lastCheck: new Date().toISOString(),\n            error: undefined\n        };\n        try {\n            // 1. Verificar API (puerto 3000)\n            const apiResponse = await fetch('/health', {\n                method: 'GET',\n                timeout: 5000\n            });\n            result.api = apiResponse.ok && apiResponse.status === 200;\n            // 2. Si la API está up, verificar Redis y Worker a través de endpoints específicos\n            if (result.api) {\n                try {\n                    // Verificar Redis a través de endpoint del API\n                    const redisResponse = await fetch('/health/redis', {\n                        method: 'GET',\n                        timeout: 3000\n                    });\n                    result.redis = redisResponse.ok;\n                } catch (e) {\n                    result.redis = false;\n                }\n                try {\n                    // Verificar Worker a través de endpoint del API\n                    const workerResponse = await fetch('/health/worker', {\n                        method: 'GET',\n                        timeout: 3000\n                    });\n                    result.worker = workerResponse.ok;\n                } catch (e) {\n                    result.worker = false;\n                }\n            }\n        } catch (error) {\n            result.error = error.message;\n            console.error('Error checking services:', error);\n        }\n        return result;\n    }\n    /**\r\n   * Verifica si el backend está disponible\r\n   * @returns true si el backend responde\r\n   */ static async healthCheck() {\n        try {\n            var _response_data;\n            // Usar proxy de Next.js en desarrollo, directo en producción\n            const healthUrl =  false ? 0 : '/health';\n            const healthClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n                timeout: 5000\n            });\n            // Usar endpoint /health según documentación del nuevo backend\n            const response = await healthClient.get(healthUrl);\n            console.log('✅ Backend health check successful:', response.status, response.data);\n            return ((_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.status) === 'ok';\n        } catch (error) {\n            console.log('🔴 Backend health check failed');\n            console.log('Error details:', error.message);\n            return false;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});