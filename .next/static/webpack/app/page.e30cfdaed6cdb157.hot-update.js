"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: () => (/* binding */ ApiService),\n/* harmony export */   getProgress: () => (/* binding */ getProgress)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ \"(app-pages-browser)/./src/lib/debug.ts\");\n\n\n// Base URL del backend - usar proxy de Next.js en desarrollo para evitar CORS\nconst API_BASE_URL =  false ? 0 : '/api/v1' // Usar proxy de Next.js en desarrollo\n;\nconsole.log('üîß API Configuration:');\nconsole.log('üìç Base URL:', API_BASE_URL);\nconsole.log('üåç Environment:', \"development\");\nconsole.log('üìù Next Public API URL:', \"http://localhost:3000/api/v1\");\n// Configurar instancia de axios\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 60000,\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    },\n    withCredentials: false\n});\n// Interceptor para debug de requests\napiClient.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log('üîç Request Debug:');\n    console.log('üìç URL:', config.url);\n    console.log('üåê Base URL:', config.baseURL);\n    console.log('üéØ Full URL:', \"\".concat(config.baseURL).concat(config.url));\n    console.log('üìù Method:', (_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase());\n    return config;\n}, (error)=>{\n    console.error('‚ùå Request Error:', error);\n    return Promise.reject(error);\n});\n// Interceptor para debug de responses\napiClient.interceptors.response.use((response)=>{\n    console.log('‚úÖ Response Success:', response.status, response.config.url);\n    return response;\n}, (error)=>{\n    var _error_config, _error_config1, _error_config2, _error_config3, _error_response, _error_response1;\n    console.error('‚ùå Response Error:');\n    console.error('üìç URL:', (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url);\n    console.error('üåê Base URL:', (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.baseURL);\n    console.error('üéØ Full URL:', \"\".concat((_error_config2 = error.config) === null || _error_config2 === void 0 ? void 0 : _error_config2.baseURL).concat((_error_config3 = error.config) === null || _error_config3 === void 0 ? void 0 : _error_config3.url));\n    console.error('üìä Status:', (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status);\n    console.error('üìÑ Response:', (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.data);\n    return Promise.reject(error);\n});\n// Utilidad para obtener el progreso del backend (simplificada para Node.js backend)\nfunction getProgress(batchStatus) {\n    // El nuevo backend ya proporciona toda la informaci√≥n de progreso estructurada\n    return {\n        completed: batchStatus.progress.completed,\n        total: batchStatus.progress.total,\n        percentage: batchStatus.progress.percentage\n    };\n}\n// Servicios API\nclass ApiService {\n    /**\r\n   * Sube un archivo CSV al backend para procesamiento\r\n   * @param file - Archivo CSV a procesar\r\n   * @returns Respuesta con el batchId\r\n   */ static async uploadFile(file) {\n        const formData = new FormData();\n        formData.append('file', file);\n        try {\n            console.log('üöÄ Starting file upload:');\n            console.log('üìÑ File:', file.name, 'Size:', file.size, 'Type:', file.type);\n            console.log('üåê Using proxy endpoint: /api/v1/scraping-batch');\n            const response = await fetch('/api/v1/scraping-batch', {\n                method: 'POST',\n                body: formData\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Upload failed:', response.status, errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const data = await response.json();\n            console.log('Upload successful:', data);\n            return data;\n        } catch (error) {\n            var _error_response, _error_response1, _error_response2, _error_response3, _error_response4, _error_message, _error_message1, _error_message2;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('Upload error details:', {\n                message: error.message,\n                code: error.code,\n                status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n                statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n                data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data\n            });\n            // Manejo espec√≠fico de errores\n            if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\n                throw new Error('‚ùå Backend server is not running on port 3000. Please start your backend server with: docker-compose up --build -d');\n            } else if (error.code === 'ECONNABORTED') {\n                throw new Error('‚è±Ô∏è Upload timeout - file too large or connection slow');\n            } else if (((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.status) === 413) {\n                throw new Error('üì¶ File too large');\n            } else if (((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.status) === 415) {\n                throw new Error('üìÑ Invalid file type - only CSV files are allowed');\n            } else if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('HTTP 404')) {\n                throw new Error('üîç Backend endpoint not found. Make sure backend is running and accessible.');\n            } else if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('CORS')) {\n                throw new Error('üåê CORS Error: Backend needs CORS configuration. The backend is running but blocking browser requests.');\n            } else if ((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes('Failed to fetch')) {\n                throw new Error('üîí Connection blocked - possible CORS issue. Backend is running but not accessible from browser.');\n            } else {\n                throw new Error(\"\\uD83D\\uDEAB Upload failed: \".concat(error.message));\n            }\n        }\n    }\n    /**\r\n   * Obtiene el estado actual de un batch de procesamiento\r\n   * @param batchId - ID del batch a consultar\r\n   * @returns Estado actual del batch\r\n   */ static async getBatchStatus(batchId) {\n        try {\n            const response = await fetch(\"/api/v1/scraping-batch/\".concat(batchId), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                if (response.status === 404) {\n                    throw new Error('‚ùì Batch not found. It may have expired or been processed.');\n                }\n                throw new Error(\"HTTP \".concat(response.status, \": Failed to fetch batch status\"));\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('Error fetching batch status:', error);\n            throw new Error(\"Failed to fetch batch status: \".concat(error.message));\n        }\n    }\n    /**\r\n   * üÜï Exporta y descarga CSV limpio desde el backend\r\n   * @param batchId - ID del batch a exportar\r\n   * @returns void - Inicia descarga autom√°tica del archivo\r\n   */ static async exportCleanCSV(batchId) {\n        try {\n            console.log('üéØ Starting CSV export for batch:', batchId);\n            const response = await apiClient.get(\"/scraping-batch/\".concat(batchId, \"/export\"), {\n                responseType: 'blob',\n                headers: {\n                    'Accept': 'text/csv'\n                },\n                timeout: 60000\n            });\n            // Crear un blob y generar descarga autom√°tica\n            const blob = new Blob([\n                response.data\n            ], {\n                type: 'text/csv;charset=utf-8;'\n            });\n            const url = window.URL.createObjectURL(blob);\n            // Crear elemento de descarga temporal\n            const link = document.createElement('a');\n            link.href = url;\n            // Generar nombre de archivo con timestamp\n            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\n            link.download = \"scraping-results-\".concat(timestamp, \".csv\");\n            // Agregar al DOM temporalmente y hacer click\n            document.body.appendChild(link);\n            link.click();\n            // Limpiar\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(url);\n            console.log('‚úÖ CSV exported successfully');\n        } catch (error) {\n            var _error_response, _error_response1;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('CSV export error:', error);\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 404) {\n                throw new Error('‚ùì Batch not found or expired');\n            } else if (((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 400) {\n                throw new Error('üö´ Batch not ready for export yet');\n            } else {\n                var _error_response_data, _error_response2;\n                throw new Error(\"\\uD83D\\uDEAB Export failed: \".concat(((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : (_error_response_data = _error_response2.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || error.message));\n            }\n        }\n    }\n    /**\r\n   * üÜï Valida el formato y contenido del archivo CSV\r\n   * @param file - Archivo CSV a validar\r\n   * @param t - Funci√≥n de traducci√≥n (opcional)\r\n   * @returns Resultado de la validaci√≥n\r\n   */ static async validateCSV(file, t) {\n        return new Promise((resolve)=>{\n            const reader = new FileReader();\n            reader.onload = (e)=>{\n                var _e_target;\n                const text = (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result;\n                const lines = text.split('\\n').filter((line)=>line.trim());\n                if (lines.length === 0) {\n                    resolve({\n                        isValid: false,\n                        errors: [\n                            t ? t('csv.file_empty') : 'File is empty'\n                        ],\n                        warnings: [],\n                        rowCount: 0,\n                        columns: [],\n                        requiredColumns: [\n                            'name',\n                            'address',\n                            'city'\n                        ],\n                        missingColumns: [\n                            'name',\n                            'address',\n                            'city'\n                        ]\n                    });\n                    return;\n                }\n                // Parse header\n                const header = lines[0].split(',').map((col)=>col.trim().replace(/[\"']/g, ''));\n                const requiredColumns = [\n                    'name',\n                    'address',\n                    'city'\n                ];\n                const optionalColumns = [\n                    'postal_code'\n                ];\n                const allValidColumns = [\n                    ...requiredColumns,\n                    ...optionalColumns\n                ];\n                // Validaciones\n                const errors = [];\n                const warnings = [];\n                const missingColumns = requiredColumns.filter((col)=>!header.some((h)=>h.toLowerCase().includes(col.toLowerCase())));\n                // Validar columnas requeridas\n                if (missingColumns.length > 0) {\n                    errors.push(t ? t('csv.required_columns_missing', {\n                        columns: missingColumns.join(', ')\n                    }) : \"Missing required columns: \".concat(missingColumns.join(', ')));\n                }\n                // Validar n√∫mero m√≠nimo de filas\n                if (lines.length < 2) {\n                    errors.push(t ? t('csv.minimum_rows_required') : 'CSV must have at least one data row besides the header');\n                }\n                // Validar n√∫mero m√°ximo de filas (l√≠mite recomendado)\n                if (lines.length > 1001) {\n                    warnings.push(t ? t('csv.maximum_rows_warning', {\n                        count: lines.length - 1\n                    }) : \"File has \".concat(lines.length - 1, \" rows. Maximum 1000 recommended for better performance\"));\n                }\n                // Validar formato de datos (muestra de las primeras 5 filas)\n                const sampleRows = lines.slice(1, 6);\n                sampleRows.forEach((row, index)=>{\n                    const cells = row.split(',');\n                    if (cells.length !== header.length) {\n                        errors.push(t ? t('csv.column_mismatch', {\n                            row: index + 2,\n                            actual: cells.length,\n                            expected: header.length\n                        }) : \"Row \".concat(index + 2, \": Number of columns does not match header (\").concat(cells.length, \" vs \").concat(header.length, \")\"));\n                    }\n                    // Validar que el nombre no est√© vac√≠o\n                    const nameIndex = header.findIndex((h)=>h.toLowerCase().includes('name'));\n                    if (nameIndex >= 0 && (!cells[nameIndex] || cells[nameIndex].trim().replace(/[\"']/g, '') === '')) {\n                        errors.push(t ? t('csv.empty_business_name', {\n                            row: index + 2\n                        }) : \"Row \".concat(index + 2, \": Business name cannot be empty\"));\n                    }\n                });\n                resolve({\n                    isValid: errors.length === 0,\n                    errors,\n                    warnings,\n                    rowCount: lines.length - 1,\n                    columns: header,\n                    requiredColumns,\n                    missingColumns\n                });\n            };\n            reader.onerror = ()=>{\n                resolve({\n                    isValid: false,\n                    errors: [\n                        t ? t('csv.file_read_error') : 'Error reading file'\n                    ],\n                    warnings: [],\n                    rowCount: 0,\n                    columns: [],\n                    requiredColumns: [\n                        'name',\n                        'address',\n                        'city'\n                    ],\n                    missingColumns: [\n                        'name',\n                        'address',\n                        'city'\n                    ]\n                });\n            };\n            reader.readAsText(file);\n        });\n    }\n    /**\r\n   * üÜï Genera y descarga una plantilla CSV de ejemplo\r\n   * @returns void - Inicia descarga del archivo plantilla\r\n   */ static downloadCSVTemplate() {\n        const template = [\n            'name,address,city,postal_code',\n            'McDonald\\'s Bahnhofstrasse,\"Bahnhofstrasse 120\",Z√ºrich,8001',\n            'Starbucks Paradeplatz,\"Paradeplatz 4\",Z√ºrich,8001',\n            'Burger King Limmatquai,\"Limmatquai 66\",Z√ºrich,8001'\n        ].join('\\n');\n        const blob = new Blob([\n            template\n        ], {\n            type: 'text/csv;charset=utf-8;'\n        });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'plantilla-scraping.csv';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n        console.log('‚úÖ Plantilla CSV descargada');\n    }\n    /**\r\n   * üÜï Verifica el estado real de todos los servicios del backend\r\n   * @returns Estado detallado de cada servicio\r\n   */ static async checkServicesStatus() {\n        const result = {\n            api: {\n                status: 'unhealthy',\n                service: 'api'\n            },\n            redis: {\n                status: 'unhealthy',\n                service: 'redis'\n            },\n            worker: {\n                status: 'unhealthy',\n                service: 'worker'\n            },\n            lastCheck: new Date().toISOString(),\n            error: undefined\n        };\n        try {\n            // 1. Verificar API general (puerto 3000)  \n            const startTime = Date.now();\n            const apiResponse = await fetch('/api/v1/health', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (apiResponse.ok) {\n                const apiData = await apiResponse.json();\n                result.api = {\n                    status: 'healthy',\n                    service: 'api',\n                    responseTime: \"\".concat(Date.now() - startTime, \"ms\"),\n                    details: apiData\n                };\n                // 2. Verificar Redis a trav√©s de endpoint espec√≠fico\n                try {\n                    const redisResponse = await fetch('/api/v1/health/redis', {\n                        method: 'GET',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json'\n                        }\n                    });\n                    if (redisResponse.ok) {\n                        const redisData = await redisResponse.json();\n                        result.redis = {\n                            status: redisData.status,\n                            service: 'redis',\n                            responseTime: redisData.responseTime,\n                            details: redisData\n                        };\n                    } else {\n                        result.redis = {\n                            status: 'unhealthy',\n                            service: 'redis',\n                            reason: \"HTTP \".concat(redisResponse.status)\n                        };\n                    }\n                } catch (error) {\n                    result.redis = {\n                        status: 'unhealthy',\n                        service: 'redis',\n                        reason: 'Connection failed'\n                    };\n                }\n                // 3. Verificar Worker a trav√©s de endpoint espec√≠fico\n                try {\n                    const workerResponse = await fetch('/api/v1/health/worker', {\n                        method: 'GET',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json'\n                        }\n                    });\n                    if (workerResponse.ok) {\n                        const workerData = await workerResponse.json();\n                        result.worker = {\n                            status: workerData.status,\n                            service: 'worker',\n                            responseTime: workerData.responseTime,\n                            reason: workerData.reason,\n                            details: workerData\n                        };\n                    } else {\n                        result.worker = {\n                            status: 'unhealthy',\n                            service: 'worker',\n                            reason: \"HTTP \".concat(workerResponse.status)\n                        };\n                    }\n                } catch (error) {\n                    result.worker = {\n                        status: 'unhealthy',\n                        service: 'worker',\n                        reason: 'Connection failed'\n                    };\n                }\n            } else {\n                result.api = {\n                    status: 'unhealthy',\n                    service: 'api',\n                    reason: \"HTTP \".concat(apiResponse.status),\n                    responseTime: \"\".concat(Date.now() - startTime, \"ms\")\n                };\n            }\n        } catch (error) {\n            result.error = error.message;\n            result.api = {\n                status: 'unhealthy',\n                service: 'api',\n                reason: error.message\n            };\n            console.error('Error checking services:', error);\n        }\n        return result;\n    }\n    /**\r\n   * Verifica si el backend est√° disponible\r\n   * @returns true si el backend responde\r\n   */ static async healthCheck() {\n        try {\n            var _response_data;\n            // Usar proxy de Next.js en desarrollo, directo en producci√≥n\n            const healthUrl =  false ? 0 : '/health';\n            const healthClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n                timeout: 5000\n            });\n            // Usar endpoint /health seg√∫n documentaci√≥n del nuevo backend\n            const response = await healthClient.get(healthUrl);\n            console.log('‚úÖ Backend health check successful:', response.status, response.data);\n            return ((_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.status) === 'ok';\n        } catch (error) {\n            console.log('üî¥ Backend health check failed');\n            console.log('Error details:', error.message);\n            return false;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});