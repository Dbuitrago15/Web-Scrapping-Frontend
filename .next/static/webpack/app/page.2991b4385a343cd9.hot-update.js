"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: () => (/* binding */ ApiService),\n/* harmony export */   parseProgress: () => (/* binding */ parseProgress)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ \"(app-pages-browser)/./src/lib/debug.ts\");\n\n\n// Base URL del backend - verificar que est√© corriendo\nconst API_BASE_URL = \"http://localhost:8000/api/v1\" || 0;\nconsole.log('üîß API Configuration:');\nconsole.log('üìç Base URL:', API_BASE_URL);\nconsole.log('üåç Environment:', \"development\");\nconsole.log('üìù Next Public API URL:', \"http://localhost:8000/api/v1\");\n// Configurar instancia de axios\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 60000,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    withCredentials: false\n});\n// Interceptor para debug de requests\napiClient.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log('üîç Request Debug:');\n    console.log('üìç URL:', config.url);\n    console.log('üåê Base URL:', config.baseURL);\n    console.log('üéØ Full URL:', \"\".concat(config.baseURL).concat(config.url));\n    console.log('üìù Method:', (_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase());\n    return config;\n}, (error)=>{\n    console.error('‚ùå Request Error:', error);\n    return Promise.reject(error);\n});\n// Interceptor para debug de responses\napiClient.interceptors.response.use((response)=>{\n    console.log('‚úÖ Response Success:', response.status, response.config.url);\n    return response;\n}, (error)=>{\n    var _error_config, _error_config1, _error_config2, _error_config3, _error_response, _error_response1;\n    console.error('‚ùå Response Error:');\n    console.error('üìç URL:', (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url);\n    console.error('üåê Base URL:', (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.baseURL);\n    console.error('üéØ Full URL:', \"\".concat((_error_config2 = error.config) === null || _error_config2 === void 0 ? void 0 : _error_config2.baseURL).concat((_error_config3 = error.config) === null || _error_config3 === void 0 ? void 0 : _error_config3.url));\n    console.error('üìä Status:', (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status);\n    console.error('üìÑ Response:', (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.data);\n    return Promise.reject(error);\n});\n// Utilidad para parsear el progreso del backend\nfunction parseProgress(progressString) {\n    // Parsear strings como \"1/2 tasks completed.\" o \"2/2 tasks completed.\"\n    const match = progressString.match(/(\\d+)\\/(\\d+)\\s+tasks/);\n    if (match) {\n        return {\n            completed: parseInt(match[1], 10),\n            total: parseInt(match[2], 10)\n        };\n    }\n    // Fallback si no se puede parsear\n    return {\n        completed: 0,\n        total: 1\n    };\n}\n// Servicios API\nclass ApiService {\n    /**\r\n   * Sube un archivo CSV al backend para procesamiento\r\n   * @param file - Archivo CSV a procesar\r\n   * @returns Respuesta con el batch_id\r\n   */ static async uploadFile(file) {\n        const formData = new FormData();\n        formData.append('file', file);\n        try {\n            console.log('üöÄ Starting file upload:');\n            console.log('üìÑ File:', file.name, 'Size:', file.size, 'Type:', file.type);\n            console.log('üåê Full URL will be:', \"\".concat(API_BASE_URL, \"/batches\"));\n            console.log('üîó Axios baseURL:', apiClient.defaults.baseURL);\n            const response = await apiClient.post('/batches', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n                timeout: 120000,\n                onUploadProgress: (progressEvent)=>{\n                    if (progressEvent.total) {\n                        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                        console.log('Upload progress:', percentCompleted + '%');\n                    }\n                }\n            });\n            console.log('Upload successful:', response.data);\n            return response.data;\n        } catch (error) {\n            var _error_response, _error_response1, _error_response2, _error_response3, _error_response4, _error_response5;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('Upload error details:', {\n                message: error.message,\n                code: error.code,\n                status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n                statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n                data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data\n            });\n            // Manejo espec√≠fico de errores\n            if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\n                throw new Error('‚ùå Backend server is not running on port 8000. Please start your backend server with: docker-compose up --build -d');\n            } else if (error.code === 'ECONNABORTED') {\n                throw new Error('‚è±Ô∏è Upload timeout - file too large or connection slow');\n            } else if (((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.status) === 413) {\n                throw new Error('üì¶ File too large');\n            } else if (((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.status) === 415) {\n                throw new Error('üìÑ Invalid file type - only CSV files are allowed');\n            } else if (((_error_response5 = error.response) === null || _error_response5 === void 0 ? void 0 : _error_response5.status) === 404) {\n                throw new Error('üîç Backend endpoint not found. Make sure backend is running and accessible.');\n            } else if (error.code === 'ERR_NETWORK') {\n                throw new Error('üåê Network error - backend may be down or unreachable');\n            } else {\n                var _error_response_data, _error_response6;\n                throw new Error(((_error_response6 = error.response) === null || _error_response6 === void 0 ? void 0 : (_error_response_data = _error_response6.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"\\uD83D\\uDEAB Upload failed: \".concat(error.message));\n            }\n        }\n    }\n    /**\r\n   * Obtiene el estado actual de un batch de procesamiento\r\n   * @param batchId - ID del batch a consultar\r\n   * @returns Estado actual del batch\r\n   */ static async getBatchStatus(batchId) {\n        try {\n            const response = await apiClient.get(\"/batches/\".concat(batchId));\n            return response.data;\n        } catch (error) {\n            var _error_response, _error_response_data_detail, _error_response_data, _error_response1, _error_response2;\n            (0,_debug__WEBPACK_IMPORTED_MODULE_0__.silentError)('Error fetching batch status:', error);\n            // Manejo espec√≠fico para el error del worker\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 404 && ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : (_error_response_data_detail = _error_response_data.detail) === null || _error_response_data_detail === void 0 ? void 0 : _error_response_data_detail.includes('Task group not found'))) {\n                throw new Error('üîÑ Batch is being processed. The Celery worker may be starting up - please wait a moment.');\n            } else if (((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.status) === 404) {\n                throw new Error('‚ùì Batch not found. It may have expired or been processed.');\n            } else {\n                throw new Error('Failed to fetch batch status');\n            }\n        }\n    }\n    /**\r\n   * Verifica si el backend est√° disponible\r\n   * @returns true si el backend responde\r\n   */ static async healthCheck() {\n        try {\n            // Crear una instancia espec√≠fica para health check al puerto base (sin /api/v1)\n            const healthClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n                baseURL: 'http://localhost:8000',\n                timeout: 5000\n            });\n            // Intentar una petici√≥n OPTIONS al root del servidor\n            const response = await healthClient.options('/');\n            console.log('‚úÖ Backend health check successful:', response.status);\n            return true;\n        } catch (error) {\n            // Si OPTIONS falla, intentar GET al root\n            try {\n                const healthClient = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n                    baseURL: 'http://localhost:8000',\n                    timeout: 5000\n                });\n                const response = await healthClient.get('/');\n                console.log('‚úÖ Backend health check successful (GET):', response.status);\n                return true;\n            } catch (secondError) {\n                console.log('üî¥ Backend not available on port 8000');\n                return false;\n            }\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});