(()=>{var e={};e.id=362,e.ids=[362],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},9065:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>l,routeModule:()=>u,serverHooks:()=>h,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>c});var s={};r.r(s),r.d(s,{GET:()=>p});var o=r(2706),a=r(8203),n=r(5994),i=r(9187);async function p(){try{let e=await fetch("http://localhost:3000/api/v1/health/redis",{method:"GET",headers:{"Content-Type":"application/json"}});if(!e.ok)return i.NextResponse.json({error:"Redis health check failed"},{status:e.status});let t=await e.json();return i.NextResponse.json(t)}catch(e){return console.error("Redis health check proxy error:",e),i.NextResponse.json({error:"Failed to connect to Redis service"},{status:500})}}let u=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/v1/health/redis/route",pathname:"/api/v1/health/redis",filename:"route",bundlePath:"app/api/v1/health/redis/route"},resolvedPagePath:"C:\\Users\\dilan\\Documents\\GitHub\\Web-Scrapping-Frontend\\src\\app\\api\\v1\\health\\redis\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:d,workUnitAsyncStorage:c,serverHooks:h}=u;function l(){return(0,n.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:c})}},6487:()=>{},8335:()=>{}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[989,452],()=>r(9065));module.exports=s})();