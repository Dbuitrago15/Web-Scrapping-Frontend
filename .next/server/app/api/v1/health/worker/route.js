(()=>{var e={};e.id=483,e.ids=[483],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},8114:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>l,routeModule:()=>u,serverHooks:()=>h,workAsyncStorage:()=>c,workUnitAsyncStorage:()=>d});var o={};t.r(o),t.d(o,{GET:()=>p});var s=t(2706),a=t(8203),n=t(5994),i=t(9187);async function p(){try{let e=process.env.BACKEND_URL||"http://localhost:3000",r=await fetch(`${e}/health/worker`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok)return i.NextResponse.json({error:"Worker health check failed"},{status:r.status});let t=await r.json();return i.NextResponse.json(t)}catch(e){return console.error("Worker health check proxy error:",e),i.NextResponse.json({error:"Failed to connect to Worker service"},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/v1/health/worker/route",pathname:"/api/v1/health/worker",filename:"route",bundlePath:"app/api/v1/health/worker/route"},resolvedPagePath:"C:\\Users\\dilan\\Documents\\GitHub\\Web-Scrapping-Frontend2\\src\\app\\api\\v1\\health\\worker\\route.ts",nextConfigOutput:"",userland:o}),{workAsyncStorage:c,workUnitAsyncStorage:d,serverHooks:h}=u;function l(){return(0,n.patchFetch)({workAsyncStorage:c,workUnitAsyncStorage:d})}},6487:()=>{},8335:()=>{}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[989,452],()=>t(8114));module.exports=o})();